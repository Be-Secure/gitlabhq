# Important: The order of failure categories matter here. It's going to match from top to bottom.
failure_categories:
  ruby_crash_core_dump:
    description: "Ruby interpreter crashes with a core dump, often showing stack traces with 'Control frame information'. These indicate severe runtime errors like memory corruption or bugs in C extensions that cause the Ruby VM to terminate unexpectedly."
    patterns:
      - "Control frame information"
    causes:
      - "Memory corruption in Ruby VM"
      - "Bugs in native C extensions"
      - "Stack overflow due to infinite recursion"
      - "Segmentation faults in the Ruby interpreter"
      - "YJIT (Ruby's JIT compiler) bugs"
    solutions:
      - "Check for recent gem updates that might have introduced C extension issues"
      - "Look for recursive code that might cause stack overflow"
      - "Run without YJIT by setting `RUBY_YJIT_ENABLE=0`"
      - "Try reproducing locally to collect more detailed crash information"
      - "If reproducible, report the issue to the Ruby core team or relevant gem maintainers"

  ruby_yjit_panick:
    description: "Panic errors in Ruby's YJIT (Yet Another Just-In-Time) compiler, which accelerates Ruby code execution. YJIT panics typically indicate internal compiler bugs or memory-related issues in the JIT implementation."
    patterns:
      - "ruby: YJIT has panicked"
    causes:
      - "Bugs in YJIT implementation"
      - "Unsupported Ruby language features used with YJIT"
      - "Memory issues in the JIT compilation process"
      - "Incompatibilities between Ruby version and YJIT version"
    solutions:
      - "Disable YJIT by setting `RUBY_YJIT_ENABLE=0` environment variable"
      - "Update to the latest Ruby patch version which may contain YJIT fixes"
      - "Report the issue to Ruby core team with reproducible example if possible"
      - "Check for known YJIT issues in the Ruby issue tracker"

  ruby_openssl:
    description: "OpenSSL-related errors in Ruby, typically involving SSL certificate validation failures, connection issues, or encryption/decryption problems. Often seen during HTTPS connections to external services."
    patterns:
      - "OpenSSL::SSL::SSLError"
    causes:
      - "SSL certificate validation failures"
      - "Outdated CA certificates"
      - "Mismatched protocol versions (TLS 1.0/1.1/1.2/1.3)"
      - "Connection resets during SSL handshake"
      - "Invalid certificate or certificate chain"
      - "Hostname verification failures"
    solutions:
      - "Update CA certificates on the system or in the Docker image"
      - "Check that the external service supports modern TLS versions"
      - "Verify the SSL certificate is valid and properly configured"
      - "If testing, consider using `OpenSSL::SSL::VERIFY_NONE` for development environments only"
      - "For connection resets, try increasing timeouts or checking network stability"
      - "Ensure hostname in certificate matches the server being accessed"

  ruby_could_not_load_file:
    description: "Ruby cannot load required files or libraries, which may be due to missing gems, incorrect load paths, or dependency issues. These errors prevent code from being properly loaded and executed."
    patterns:
      - "LoadError:"
      - "cannot load such file"
    causes:
      - "Missing gem dependencies"
      - "Incorrect load paths"
      - "Gems installed but not properly required"
      - "Mismatched gem versions between Gemfile.lock and installed gems"
      - "Native extension build failures during gem installation"
    solutions:
      - "Run `bundle install` to ensure all dependencies are installed"
      - "Check `require` statements for correct file paths and naming"
      - "Verify that the gem is listed in your Gemfile"
      - "For native extensions, ensure development headers are installed (e.g., `libpq-dev` for pg gem)"
      - "Try `bundle pristine` to reinstall gems from scratch"
      - "Check for path issues in require statements - remember Ruby load paths are relative"

  ruby_undefined_method_or_variable:
    description: "References to undefined local variables or methods in Ruby code, typically caused by typos, missing method definitions, or scope issues. These errors occur when code tries to access variables or call methods that don't exist."
    patterns:
      - "undefined local variable or method `"
      - "undefined method `"
    causes:
      - "Typos in method or variable names"
      - "Method defined in a different scope than where it's called"
      - "Missing require statements for modules that define the method"
      - "Calling methods on nil values (NoMethodError)"
      - "Using a method that was renamed or removed"
      - "Method defined as private or protected but called from outside context"
    solutions:
      - "Check for typos in the method or variable name"
      - "Ensure the method is defined in the correct scope and properly required"
      - "Add nil checks before calling methods on potentially nil objects"
      - "Verify method visibility (public/private/protected) matches how it's being called"
      - "Check the method signature for any recent changes"
      - "For class methods, ensure using `.method` (not `#method`) notation in documentation"

  ruby_frozen:
    description: "Attempts to modify frozen (immutable) objects in Ruby, such as strings, arrays, or hashes that have been marked as read-only. Occurs when code tries to alter objects that have been frozen with the freeze method."
    patterns:
      - "FrozenError:"
    causes:
      - "Attempting to modify a frozen object"
      - "Ruby constants are implicitly frozen in recent Ruby versions"
      - "Objects frozen by `freeze` method call"
      - "Strings in string literals with frozen_string_literal pragma"
      - "Modifying objects returned from methods that return frozen instances"
    solutions:
      - "Create a duplicate using `.dup` before modifying the object"
      - "For strings, use unfrozen string literals with `# frozen_string_literal: false`"
      - "Check if an object is frozen before attempting modification with `.frozen?`"
      - "Redesign code to avoid modifying frozen objects"
      - "For constants, assign a new value rather than trying to modify in place"

  ruby_wrong_argument_type:
    description: "Type mismatch errors where methods receive arguments of the wrong type. These occur when a method expects one type of object (like a Module) but receives another (like a Class)."
    patterns:
      - "wrong argument type.+expected.+"
    causes:
      - "Passing an object of incorrect type to a method"
      - "Type conversion errors (e.g., trying to convert non-numeric string to number)"
      - "Class vs. Module confusion in metaprogramming"
      - "Using a symbol when a string is expected or vice versa"
      - "Passing wrong object type to built-in methods"
    solutions:
      - "Check the method signature and ensure arguments match expected types"
      - "Add explicit type conversion where needed (e.g., `to_s`, `to_i`, etc.)"
      - "For complex types, verify the object's class with `object.class` or `object.is_a?`"
      - "Review documentation for correct argument types"
      - "Consider adding type validation at the beginning of methods"

  ruby_uninitialized_constant:
    description: "References to Ruby constants (classes or modules) that haven't been defined or properly loaded. Often occurs due to missing requires, autoloading issues, or namespace problems."
    patterns:
      - "uninitialized constant "
    causes:
      - "Missing `require` statement for file defining the constant"
      - "Namespace resolution issues (e.g., using `ClassName` instead of `Module::ClassName`)"
      - "Autoloading failures"
      - "Typos in constant names"
      - "Circular dependencies preventing proper initialization"
    solutions:
      - "Add necessary `require` statements at the top of the file"
      - "Check for correct namespace resolution, using full path when needed (`::ClassName`)"
      - "Verify spelling of constant names"
      - "For Rails, ensure autoload paths include the correct directories"
      - "Break circular dependencies by restructuring code"
      - "Make sure the constant is defined before it's used"

  ruby_gitlab_settings_missing_setting:
    description: "Missing configuration settings in GitLab's settings framework, occurring when code tries to access configuration options that haven't been defined. Usually requires updating configuration files or adding missing settings."
    patterns:
      - "GitlabSettings::MissingSetting"
    causes:
      - "Setting referenced in code but not defined in configuration"
      - "Configuration file missing required settings"
      - "Environment-specific setting not defined for current environment"
      - "Typo in setting name"
      - "New feature requiring configuration not yet added to settings"
    solutions:
      - "Add the missing setting to appropriate configuration file"
      - "Check for typos in setting name used in code"
      - "Ensure setting is defined for the current environment"
      - "Add default value for the setting if appropriate"
      - "Check recent changes that might have introduced new required settings"

  ruby_syntax:
    description: "Ruby syntax errors, including unexpected tokens, missing keywords, or malformed code structures. These prevent code from being parsed and must be fixed before execution."
    patterns:
      - "syntax error, unexpected"
      - "SyntaxError"
    causes:
      - "Missing `end` keywords for blocks, methods, or classes"
      - "Unclosed string literals, arrays, or hashes"
      - "Invalid Ruby syntax or attempting to use features from newer Ruby versions"
      - "Mismatched brackets, parentheses, or quotes"
      - "Using reserved keywords as variable or method names"
    solutions:
      - "Carefully review code for syntax issues highlighted in the error message"
      - "Use a code editor with syntax highlighting and linting"
      - "Check for matching pairs of brackets, quotes, and `do`/`end` blocks"
      - "Run `rubocop` locally to catch syntax issues before committing"
      - "Ensure code is compatible with the Ruby version used in CI"
      - "For complex syntax issues, simplify the code structure"

  ruby_eof:
    description: "Unexpected end-of-file errors in Ruby, typically occurring when reading from streams or files that unexpectedly terminate. Often seen in network operations or file parsing."
    patterns:
      - "EOFError"
    causes:
      - "Attempting to read beyond the end of a file or stream"
      - "Network connection closed unexpectedly during read operation"
      - "File truncated or corrupted"
      - "Socket connection closed by remote server"
      - "Misuse of IO methods without proper checks for end-of-file condition"
    solutions:
      - "Add proper error handling for read operations"
      - "Use conditional read methods that check for EOF (`read_nonblock` with exception: false)"
      - "Implement retry logic for network operations"
      - "Verify file integrity before reading"
      - "For sockets, check connection status before attempting to read"
      - "Add timeout handling for blocking IO operations"

  ruby_type:
    description: "Ruby type errors where operations are attempted on incompatible types, such as treating a non-module as a module or attempting operations not supported by a particular object type."
    patterns:
      - "TypeError:"
    causes:
      - "Performing operations on an object that doesn't support them"
      - "Implicit type conversion failures"
      - "Mixing incompatible types in operations"
      - "Using methods that require specific object types"
      - "Attempting to extend or include non-modules"
    solutions:
      - "Check object types before operating on them (using `is_a?` or `respond_to?`)"
      - "Add explicit type conversions where needed"
      - "Ensure methods are called on objects that support them"
      - "Refactor code to handle different object types appropriately"
      - "For extension/inclusion errors, ensure you're using a Module, not a Class"

  ruby_runtime_exception:
    description: "Generic runtime exceptions in Ruby code, representing a wide range of operational errors that occur during program execution rather than at parse time."
    patterns:
      - "RuntimeError"
    causes:
      - "Explicitly raised exceptions without specific type (`raise \"error\"`)"
      - "Unexpected conditions during code execution"
      - "Logic errors in the application flow"
      - "Unhandled edge cases"
      - "Resource allocation or permission issues"
    solutions:
      - "Check the specific error message to understand the cause"
      - "Add more specific exception types rather than generic RuntimeError"
      - "Improve error handling for edge cases"
      - "Add defensive programming checks for potential error conditions"
      - "Look for places where exceptions are being raised explicitly"

  ruby_unknown_keyword:
    description: "Method calls with unknown keyword arguments, usually due to API changes, typos in keyword names, or version mismatches between libraries."
    patterns:
      - "unknown keyword:"
    causes:
      - "Method API changed, removing previously supported keywords"
      - "Typos in keyword argument names"
      - "Using keyword arguments with methods that don't support them"
      - "Library version mismatch with incompatible method signatures"
      - "Missing required keyword arguments"
    solutions:
      - "Check method documentation for supported keyword arguments"
      - "Review for typos in keyword names"
      - "Update code to match changed APIs in newer versions"
      - "Check for version mismatches in dependencies"
      - "Ensure using the correct method signature"

  ruby_wrong_number_of_arguments:
    description: "Method calls with an incorrect number of arguments, either too few or too many. Usually caused by API changes or misunderstanding of method signatures."
    patterns:
      - "wrong number of arguments \\(gven"
    causes:
      - "Calling a method with too many or too few arguments"
      - "API changes that modified method signatures"
      - "Confusion between different method overloads"
      - "Missing or extra required arguments"
      - "Using positional arguments when keywords are expected or vice versa"
    solutions:
      - "Check method documentation for correct number of arguments"
      - "Update method calls to match the expected signature"
      - "For API changes, update code to conform to new signatures"
      - "Make sure required arguments are provided"
      - "Check if you're mixing positional and keyword arguments incorrectly"

  ruby_bundler_command_failed:
    description: "Failures when Bundler attempts to load and execute Ruby commands, often due to dependency issues, environment problems, or errors in the executed command itself."
    patterns:
      - "bundler: failed to load command: "
    causes:
      - "Missing gem dependencies"
      - "Execution permission issues"
      - "Errors in the script being executed"
      - "Environment configuration problems"
      - "Path or Ruby version mismatches"
    solutions:
      - "Run `bundle install` to ensure all dependencies are installed"
      - "Check execution permissions on the command (`chmod +x` if needed)"
      - "Review script for errors or compatibility issues"
      - "Check Ruby version compatibility"
      - "Ensure environment variables are correctly set"
      - "Look for details in error traces following this message"

  ruby_generic_failure:
    description: "Generic Ruby errors that don't match more specific categories, typically shown in RSpec test failures or stack traces. Used as a fallback for Ruby errors not captured by other patterns."
    patterns:
      - "Failure/Error:"
      - ":in `"
    causes:
      - "Various Ruby errors not covered by more specific categories"
      - "Application-specific exceptions"
      - "Test failures"
      - "Logic errors in code"
      - "Unexpected behaviors in dependencies"
    solutions:
      - "Examine the full error message and stack trace for specific causes"
      - "Review the code at the location indicated in the stack trace"
      - "Run failing tests locally with more verbose output"
      - "Check recent changes that might have introduced the issue"
      - "Review application logs for more context"

  job_timeouts:
    description: "CI/CD job execution timeouts, occurring when jobs run longer than their configured time limits (often 90 minutes for GitLab CI). These may indicate infinite loops, performance issues, or jobs that simply need more time."
    patterns:
      - "execution took longer than 1h30m0s seconds"
    causes:
      - "Tests or operations taking longer than the job timeout limit"
      - "Infinite loops or deadlocks"
      - "Resource contention slowing down execution"
      - "Inefficient code or database queries"
      - "Large data sets being processed without optimization"
    solutions:
      - "Optimize slow-running tests or operations"
      - "Split long-running jobs into multiple smaller jobs"
      - "Use parallelization to speed up test execution"
      - "Fix infinite loops or deadlocks in the code"
      - "Consider increasing job timeout if appropriate"
      - "Add timeouts to potentially long-running operations"

  rspec_at_80_min:
    description: "RSpec test suite timeouts at the 80-minute mark, a specific limit set for GitLab's test suite to prevent excessively long-running tests. Test suites exceeding this limit are forcibly terminated."
    patterns:
      - "Rspec suite is exceeding the 80 minute limit and is forced to exit with error"
    causes:
      - "Test suite contains too many or too slow tests for the time limit"
      - "Inefficient tests with unnecessary setup or operations"
      - "Tests waiting on slow external resources"
      - "Test ordering causing slow tests to run together"
      - "Resource contention on CI runners"
    solutions:
      - "Optimize slow tests to improve execution time"
      - "Split test files into smaller groups"
      - "Use proper mocking and stubbing to avoid slow external calls"
      - "Consider moving very slow tests to a separate job"
      - "Profile test execution to identify bottlenecks"
      - "Use parallelization with knapsack to distribute test load"

  makefile:
    description: "Failures in Makefile-based build processes, often occurring during compilation of C/C++ code, GitLab components like Gitaly, or when running make-based commands. The Error 1 indicates a non-zero exit status from a command."
    patterns:
      - "make: .+ Error 1"
    causes:
      - "Compilation errors in C/C++ code"
      - "Missing dependencies required by the build"
      - "Command referenced in Makefile not found or returning error"
      - "Syntax errors in Makefile"
      - "Permission issues preventing execution"
    solutions:
      - "Check compilation errors in the lines preceding this message"
      - "Install missing dependencies required for the build"
      - "Verify commands used in the Makefile exist and work correctly"
      - "Check Makefile syntax and variable definitions"
      - "Ensure proper permissions on files being built"

  shell_unbound_variable:
    description: "References to undefined shell variables in bash scripts, occurring when scripts attempt to use variables that haven't been set or have gone out of scope."
    patterns:
      - "unbound variable"
    causes:
      - "Using a variable that hasn't been defined"
      - "Typo in variable name"
      - "Environment variable expected but not set"
      - "Variable set in a subshell but used in parent shell"
      - "Missing `export` for variables meant to be available in child processes"
    solutions:
      - "Check for typos in variable names"
      - "Ensure variables are defined before use"
      - "Use default values with `${VAR:-default}` syntax"
      - "Add error handling for missing variables"
      - "Set `set -u` to catch unbound variables early"
      - "For CI variables, ensure they're defined in settings"

  shell_syntax:
    description: "Shell script syntax errors, including malformed commands, missing quotes, incorrect control structures, or other bash syntax issues that prevent script execution."
    patterns:
      - ": syntax error"
    causes:
      - "Missing or unmatched quotes, parentheses, or brackets"
      - "Invalid syntax in control structures (if, for, while)"
      - "Incorrect command substitution"
      - "Misplaced or missing semicolons"
      - "Using bash features in a more restricted shell"
    solutions:
      - "Check for unmatched quotes, brackets, or parentheses"
      - "Validate shell script syntax with a linter like shellcheck"
      - "Use proper quoting for variables and expansions"
      - "Ensure script is using the intended shell (bash, sh, etc.)"
      - "Simplify complex expressions or break them into smaller parts"

  shell_permission:
    description: "Permission denied errors in shell commands, typically due to insufficient file access rights, attempting to write to read-only locations, or execute files without execute permissions."
    patterns:
      - ": Permission denied"
    causes:
      - "Insufficient file or directory permissions"
      - "Attempting to write to a read-only filesystem"
      - "Executing a script without the executable bit set"
      - "User or CI runner lacks necessary permissions"
      - "Attempting to access protected system resources"
    solutions:
      - "Check file permissions with `ls -l` and adjust with `chmod` if needed"
      - "For scripts, ensure they have execute permission (`chmod +x script.sh`)"
      - "Use a different directory with appropriate permissions"
      - "Check if the CI runner has necessary permissions"
      - "Run operations as appropriate user with proper privileges"

  shell_file_not_found:
    description: "Attempts to access files or directories that don't exist in shell commands, often due to incorrect paths, missing files, or failed file generation steps."
    patterns:
      - ": No such file or directory"
    causes:
      - "File or directory does not exist at the specified path"
      - "Incorrect path used in command"
      - "File was expected to be generated but wasn't"
      - "File was deleted or moved before access"
      - "Path typos or incorrect variable expansion"
    solutions:
      - "Verify file paths are correct and files exist"
      - "Use absolute paths when relative paths might be ambiguous"
      - "Check if previous steps that should generate the file completed successfully"
      - "Ensure working directory is what you expect with `pwd`"
      - "Debug by listing directory contents with `ls -la`"

  shell_command_not_found:
    description: "References to commands that don't exist or aren't in the system PATH, typically due to missing dependencies, uninstalled tools, or typos in command names."
    patterns:
      - ": command not found"
    causes:
      - "Command is not installed on the system"
      - "Command is installed but not in the PATH"
      - "Typo in command name"
      - "Attempting to use an alias that isn't defined"
      - "Missing dependency not installed in CI environment"
    solutions:
      - "Install the required command or package"
      - "Check for typos in the command name"
      - "Use full paths for commands in non-standard locations"
      - "Add the command's directory to PATH"
      - "Verify dependencies in CI configuration"
      - "For Docker-based CI, ensure command is installed in the Docker image"

  shell_not_in_function:
    description: "Shell script errors related to function context, typically when using function-specific commands like 'return' outside of a function definition."
    patterns:
      - ": not in a function"
    causes:
      - "Using `return` statement outside of a function"
      - "Function-specific constructs used in global scope"
      - "Attempting to access function-local variables from outside"
      - "Issues with bash script structure"
    solutions:
      - "Only use `return` inside function definitions"
      - "Replace `return` with `exit` in top-level script context"
      - "Ensure function definitions are correct (proper syntax)"
      - "Restructure script to properly encapsulate functionality in functions"
      - "Check for missing function definition or scope issues"

  shell_readonly_variable:
    description: "Attempts to modify read-only shell variables, which are protected from changes. Often seen with environment variables or constants that shouldn't be altered during execution."
    patterns:
      - "readonly variable"
    causes:
      - "Attempting to modify a variable declared with `readonly`"
      - "Trying to change internal shell variables that are read-only"
      - "Redefining environment variables that are protected"
      - "Shell or system configuration that makes certain variables immutable"
    solutions:
      - "Avoid modifying readonly variables; use different variable names instead"
      - "Check which variables are readonly using `readonly -p`"
      - "Redesign script to work without modifying readonly variables"
      - "For environment setup, set variables before they become readonly"
      - "If necessary, create a subshell where variables can be redefined"

  shell_could_not_gzip:
    description: "Failures when attempting to compress files with gzip, particularly when the input stream ends unexpectedly. May indicate truncated files or interrupted streams."
    patterns:
      - "gzip: stdin: unexpected end of file"
    causes:
      - "Input file or stream is truncated or corrupt"
      - "Pipe to gzip interrupted unexpectedly"
      - "Disk space issues during compression"
      - "Input source ended prematurely"
      - "Network interruption during streaming"
    solutions:
      - "Verify input file integrity before compression"
      - "Check for disk space issues"
      - "Ensure input streams are complete before compression"
      - "Add error handling for compression operations"
      - "For pipelines, ensure upstream commands complete successfully"

  io:
    description: "Input/Output errors during file operations, network transfers, or device interactions. These indicate low-level problems with reading from or writing to resources."
    patterns:
      - "ERROR: .+ IO ERROR"
    causes:
      - "Disk or storage device failures"
      - "Network interruptions during data transfer"
      - "File system corruption"
      - "Insufficient permissions for I/O operations"
      - "Resource contention or locks preventing access"
    solutions:
      - "Check storage system health and available space"
      - "Verify network connectivity for remote resources"
      - "Ensure correct permissions for files and directories"
      - "Add retry logic for transient I/O errors"
      - "For CI runners, check if there are infrastructure issues"

  could_not_curl:
    description: "Failures when using curl to make HTTP requests, typically due to network issues, invalid URLs, or server errors. Often includes HTTP error codes that provide more specific information."
    patterns:
      - "curl.+The requested URL returned error"
    causes:
      - "Network connectivity issues"
      - "Server returning HTTP error codes"
      - "Invalid or malformed URLs"
      - "DNS resolution failures"
      - "Timeouts due to slow server response"
      - "Server-side issues or maintenance"
    solutions:
      - "Check URL format and validity"
      - "Verify network connectivity to the target server"
      - "Look at the specific HTTP error code for more details"
      - "For authentication errors, verify credentials"
      - "Add retry logic with backoff for transient issues"
      - "Check if the server or service is experiencing known issues"

  ssl_connect_reset_by_peer:
    description: "SSL connection reset errors during secure communications, often due to network interruptions, server-side SSL configuration issues, or certificate problems."
    patterns:
      - "Connection reset by peer - SSL_connect"
    causes:
      - "Network interruption during SSL handshake"
      - "Server closed connection during negotiation"
      - "SSL protocol version mismatch"
      - "Cipher suite incompatibility"
      - "Server-side SSL configuration issues"
      - "Firewall or proxy interfering with SSL traffic"
    solutions:
      - "Check network stability and connectivity"
      - "Verify SSL/TLS configuration on both client and server"
      - "Try specifying compatible TLS version explicitly"
      - "Add retry logic for transient connection issues"
      - "Check for server-side SSL configuration changes"
      - "Verify that firewalls or proxies allow SSL connections"

  http:
    description: "HTTP-related errors when making web requests, including client errors (4xx), server errors (5xx), and exceptions in HTTP client libraries. These indicate problems with API interactions or web service communications."
    patterns:
      - "Server responded with code"
      - "400 Bad Request"
      - "503 Service Unavailable"
      - "Net::HTTPClientException"
      - "Net::HTTPFatalError"
    causes:
      - "Invalid request format or parameters (4xx errors)"
      - "Server-side issues or maintenance (5xx errors)"
      - "Authentication or authorization failures"
      - "Rate limiting or quota exceeded"
      - "Network connectivity problems"
      - "Server overload or unavailability"
    solutions:
      - "Check request format, parameters, and headers"
      - "Verify authentication credentials and tokens"
      - "For 5xx errors, wait and retry with exponential backoff"
      - "Look for service status updates if persistent server errors"
      - "Check API documentation for correct request format"
      - "Implement circuit breakers for unreliable services"

  failed_to_open_tcp_connection:
    description: "Failures to establish TCP network connections, typically due to network issues, firewalls, incorrect hostnames/IPs, or services not running on the expected ports."
    patterns:
      - "Error: Failed to open TCP connection to "
    causes:
      - "Target service not running or listening on expected port"
      - "Network connectivity issues"
      - "Firewall blocking connection"
      - "DNS resolution failures"
      - "Incorrect hostname or IP address"
      - "Service overloaded and rejecting connections"
    solutions:
      - "Verify the service is running on the target host and port"
      - "Check network connectivity between client and server"
      - "Verify hostname resolves to the correct IP address"
      - "Check firewall rules to ensure connection is allowed"
      - "Try an alternative endpoint if available"
      - "Add retry logic with exponential backoff"

  authentication_failures:
    description: "Authentication failures when accessing protected resources, including Git repositories, Docker registries, or API endpoints. Usually due to invalid credentials, expired tokens, or insufficient permissions."
    patterns:
      - "fatal: Authentication failed for"
      - "HTTP Basic: Access denied"
    causes:
      - "Invalid credentials (username/password or token)"
      - "Expired access tokens"
      - "Insufficient permissions for the requested operation"
      - "Authentication method not supported or incorrect"
      - "Two-factor authentication required but not provided"
      - "Token revoked or invalidated"
    solutions:
      - "Verify credentials are correct and not expired"
      - "Check if token has necessary permissions"
      - "Generate a new token if current one might be invalid"
      - "Ensure CI/CD variables are properly set and masked"
      - "Verify the authentication method is supported"
      - "Check organization access policies that might restrict access"

  unknown_failure_canceled:
    description: "Job cancellations with unclear causes, possibly due to manual cancellation, GitLab Runner interruptions, or system-level issues. These jobs are terminated before normal completion."
    patterns:
      - "ERROR: Job failed: canceled"
    causes:
      - "Manual job cancellation"
      - "Runner shutdown or failure"
      - "System resource constraints leading to termination"
      - "Timeout at system or orchestration level"
      - "Dependency job failure causing cancellation"
      - "GitLab CI/CD system issues"
    solutions:
      - "Check if the job was manually canceled"
      - "Look for system events that might have caused runner issues"
      - "Check for resource constraints (CPU, memory, disk)"
      - "Examine dependency jobs that might have triggered cancellation"
      - "Retry the job to see if it was a transient issue"
      - "Check GitLab status page for system-wide issues"

  e2e_specs:
    description: "End-to-end test failures specific to GitLab's QA framework, including failures to load the QA tools, failed readiness checks, or other issues with the end-to-end testing infrastructure."
    patterns:
      - "failed to load command: bin/qa"
      - "failed to load command: gitlab-qa"
      - "QA::Tools::ReadinessCheck::ReadinessCheckError"
    causes:
      - "QA framework not properly installed or initialized"
      - "Dependencies missing for QA tests"
      - "Environment not properly set up for E2E testing"
      - "Target instance not ready or accessible"
      - "Issues with test environment configuration"
    solutions:
      - "Ensure QA dependencies are properly installed"
      - "Check QA framework initialization and configuration"
      - "Verify target GitLab instance is accessible and responsive"
      - "Review readiness check logs to identify specific failures"
      - "Check for recent changes to QA framework or test environment"
      - "Run setup steps manually to debug environment issues"

  e2e_lint:
    description: "Linting issues in end-to-end tests, particularly related to testcase linking conventions that ensure proper documentation and traceability for tests."
    patterns:
      - "Testcase link violations detected"
    causes:
      - "Missing testcase links in E2E test files"
      - "Incorrect format for testcase links"
      - "Links pointing to non-existent testcases"
      - "Multiple E2E tests referencing the same testcase"
      - "Outdated testcase references"
    solutions:
      - "Add proper testcase links to E2E test files using correct format"
      - "Verify testcase links point to valid, existing cases"
      - "Ensure each test has a unique testcase reference"
      - "Update outdated testcase references"
      - "Follow E2E test documentation guidelines"

  unexpected:
    description: "Generic unexpected errors that don't match other categories, serving as a catch-all for miscellaneous issues. These often require manual investigation to determine the root cause."
    patterns:
      - "An unexpected error occurred"
    causes:
      - "Various unclassified errors"
      - "Edge cases not handled by more specific error patterns"
      - "Unusual environmental or configuration issues"
      - "Multiple failures occurring simultaneously"
      - "New or rare error conditions without specific patterns"
    solutions:
      - "Examine the full error logs for more specific information"
      - "Try to reproduce the issue locally for better debugging"
      - "Check recent changes that might have introduced the issue"
      - "Look for environment-specific factors that might be relevant"
      - "Consider adding a more specific error pattern if this occurs frequently"
