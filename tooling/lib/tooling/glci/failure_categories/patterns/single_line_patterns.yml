# Important: The order of failure categories matter here. It's going to match from top to bottom.
failure_categories:
  danger:
    description: "Issues with the Danger code review bot that checks MRs for common problems. Often seen when the 'danger-review' job needs to be retried."
    patterns:
      - "If needed, you can retry the.+`danger-review` job"
    causes:
      - "Temporary failure in Danger analysis"
      - "Network or API connectivity issues during analysis"
      - "Timeout or resource constraints during review"
      - "GitLab API rate limiting"
      - "Errors in Danger configuration"
    solutions:
      - "Retry the danger-review job as suggested in the error message"
      - "Check specific errors in the job output to identify underlying issues"
      - "If persistent, verify Danger configuration is correct"
      - "Make sure necessary CI variables are properly set"
      - "For repeated failures, try pushing a new commit to trigger a fresh analysis"

  db_migrations:
    description: "Database migration failures, including schema inconsistencies, rollback issues, pending migrations, and column operation errors. These issues often occur when database changes aren't properly synchronized."
    patterns:
      - "Error: rollback of added migrations does not revert db/structure.sql to previous state, please investigate"
      - "the committed db/structure.sql does not match the one generated by running added migrations"
      - "the committed files in db/schema_migrations do not match those expected by the added migrations"
      - "You have.+pending migrations"
      - "Column operations, like dropping, renaming or primary key conversion"
      - "createdb: error:"
      - "Batched migration should be finalized only after at-least one required stop from queuing it"
    causes:
      - "Migration files and db/structure.sql are out of sync"
      - "Migrations are not properly reversible"
      - "Migration has been added but not applied locally"
      - "Column operations missing the required ignore_columns in the model"
      - "Database already exists when trying to create it"
      - "Batched migration finalized too early"
    solutions:
      - "Run `bin/rails db:migrate db:test:prepare` locally"
      - "Ensure your migrations are properly reversible by testing them with `bin/rails db:rollback`"
      - "For column operations, add `self.ignored_columns = [:column_name]` to the model before dropping"
      - "Follow the batched migrations workflow: https://docs.gitlab.com/ee/development/database/batched_background_migrations.html#finalize-a-batched-background-migration"
      - "Add the 'pipeline:skip-check-migrations' label to skip this check if needed"
      - "Check if database exists before attempting to create it"

  db_table_write_protected:
    description: "Attempts to write to database tables that are protected within the GitLab database schema, or unsupported cross-joins between database tables. This usually happens when code tries to modify tables it shouldn't have access to."
    patterns:
      - "Table.+is write protected within this Gitlab database"
      - "Unsupported cross-join across"
    causes:
      - "Accessing database tables outside allowed schemas"
      - "Cross-schema joins involving tables that should be separated"
      - "Using wrong database connection for specific operations"
      - "Database query violating database partition rules"
      - "Not respecting the database architecture constraints"
    solutions:
      - "Ensure you're using the correct database connection for the operation"
      - "Check the documentation on multiple databases: https://docs.gitlab.com/ee/development/database/multiple_databases.html"
      - "Refactor code to avoid cross-schema joins and respect database boundaries"
      - "For CI data, use the CI database connection context"
      - "Consider using proper abstractions or services to access cross-schema data"

  db_cross_schema_access:
    description: "Unauthorized cross-schema database access attempts, which occur when code tries to access tables outside the allowed schemas for the current database connection."
    patterns:
      - "Gitlab::Database::QueryAnalyzers::GitlabSchemasValidateConnection::CrossSchemaAccessError"
    causes:
      - "Using a connection to access tables outside its allowed schema scope"
      - "Incorrect connection routing for database operations"
      - "Missing proper connection switching in multi-database operations"
      - "Query accessing tables across different database partitions"
      - "ORM configuration not respecting schema boundaries"
    solutions:
      - "Use the appropriate connection for the specific schema (main vs CI)"
      - "Wrap cross-schema queries in the correct connection context"
      - "Review GitLab's database architecture documentation"
      - "For CI-related tables, use Ci::ApplicationRecord instead of ApplicationRecord"
      - "Consider refactoring to avoid cross-schema access altogether"
      - "Check connection routing using ApplicationRecord.connection.select_value('SELECT current_schema')"

  db_connection_in_rails_initializer:
    description: "Database connections being made during Rails initializers, which is discouraged as it can cause race conditions and other issues during application startup."
    patterns:
      - "raise_database_connection_made_error"
    causes:
      - "Database queries or connections made during Rails initialization"
      - "ActiveRecord model loading or queries in initializers"
      - "Running migrations or schema operations during startup"
      - "Eager loading models that trigger database access"
      - "Cache warming or configuration that connects to database too early"
    solutions:
      - "Move database operations out of initializers"
      - "Use lazy loading for database-dependent components"
      - "Defer database connections until after application boot"
      - "Check initializer code for explicit or implicit database access"
      - "For necessary database access in initialization, see documentation: https://docs.gitlab.com/ee/development/rails_initializers.html#database-connections-in-initializers"

  rails_pg_not_in_database_dictionary:
    description: "Tables missing from the database dictionary, which maintains metadata about database tables. New or deleted tables must be properly registered in the dictionary."
    patterns:
      - "Any new or deleted tables must be added to the database dictionary"
    causes:
      - "New table created but not added to database dictionary"
      - "Table definition removed without updating dictionary"
      - "Incorrect schema assignment in database dictionary"
      - "Missing or outdated YAML files in db/docs directory"
      - "Schema changes not reflected in dictionary files"
    solutions:
      - "Update the database dictionary by running `bin/rails gitlab:db:dictionary:generate`"
      - "Add missing table definitions to appropriate files in db/docs directory"
      - "Ensure new tables have correct gitlab_schema assignment"
      - "Commit generated dictionary files with your changes"
      - "See documentation: https://docs.gitlab.com/ee/development/database/database_dictionary.html"

  rails_pg_no_foreign_key:
    description: "Missing foreign key constraints in the database schema, which can lead to data integrity issues. This typically happens during migration rollbacks or schema changes."
    patterns:
      - "has no foreign key for"
    causes:
      - "Foreign key constraint missing in database schema"
      - "Migration rollback that doesn't properly restore foreign keys"
      - "Inconsistent sequence of migrations affecting related tables"
      - "Manual schema changes bypassing migrations"
      - "Attempting to add a foreign key to a non-existent column or table"
    solutions:
      - "Add missing foreign key constraints in migrations"
      - "Ensure migration rollbacks properly restore removed foreign keys"
      - "Review migration sequence to ensure correct order of operations"
      - "Check that referenced tables and columns exist before adding foreign keys"
      - "Use Rails migration methods like add_foreign_key and remove_foreign_key"

  rails_pg_active_sql_transaction:
    description: "Postgres errors related to operations that cannot be performed inside a transaction block, such as creating indexes concurrently."
    patterns:
      - "PG::ActiveSqlTransaction"
    causes:
      - "Attempting to create indexes concurrently inside a transaction"
      - "Using operations that require being outside transactions"
      - "Nested transactions preventing certain PostgreSQL operations"
      - "Missing `disable_ddl_transaction!` in migrations that need it"
      - "Operations requiring schema locks within transaction blocks"
    solutions:
      - "Add `disable_ddl_transaction!` to migrations that use concurrent operations"
      - "Move operations like CREATE INDEX CONCURRENTLY outside transaction blocks"
      - "Split migration into multiple migrations if both transactional and non-transactional operations needed"
      - "For migrations, refer to: https://docs.gitlab.com/ee/development/migration_style_guide.html#disable-ddl-transaction"
      - "Check for explicit transaction blocks that may be wrapping restricted operations"

  rails_pg_check_violation:
    description: "Violations of PostgreSQL check constraints on database tables, which prevent invalid data from being inserted."
    patterns:
      - "PG::CheckViolation"
    causes:
      - "Inserting or updating data that violates check constraints"
      - "Schema constraints not aligned with application code validations"
      - "Missing validation in application code before database operations"
      - "Changes to check constraints without updating affected data"
      - "Seed data or migrations inserting invalid values"
    solutions:
      - "Ensure data meets check constraint requirements before insert/update"
      - "Align application validations with database constraints"
      - "Update existing data to comply before adding or modifying constraints"
      - "Check error details for specific constraint name and column information"
      - "For complex constraints, consider implementing application-level validations"

  rails_pg_dependent_objects_still_exist:
    description: "Attempts to drop database objects that have dependencies, such as constraints or references from other tables."
    patterns:
      - "PG::DependentObjectsStillExist"
    causes:
      - "Dropping a table that has foreign keys pointing to it"
      - "Removing a database object that other objects depend on"
      - "Deleting a column referenced by constraints or indexes"
      - "Incorrect order of operations in migrations"
      - "Missing cascade option when dropping objects with dependencies"
    solutions:
      - "Drop dependent objects first before removing their dependencies"
      - "Use CASCADE option to automatically drop dependent objects (use with caution)"
      - "Reorder migration steps to respect dependency order"
      - "Explicitly remove foreign keys before dropping tables"
      - "Identify dependent objects using PostgreSQL system catalogs"

  rails_pg_duplicate_alias:
    description: "SQL query errors due to duplicate table aliases, typically occurring in complex queries with the same table name specified multiple times."
    patterns:
      - "PG::DuplicateAlias"
    causes:
      - "Using the same alias for multiple tables in a query"
      - "Auto-generated aliases colliding in complex queries"
      - "Joins or CTEs with duplicate table references"
      - "Query composition creating unintended alias duplicates"
      - "ORMs generating queries with naming conflicts"
    solutions:
      - "Use unique aliases for each table reference in queries"
      - "Review complex queries for duplicate table aliases"
      - "Ensure joins and subqueries have distinct aliases"
      - "In ActiveRecord, use `from('table_name t1')` syntax to specify aliases"
      - "Simplify overly complex queries that lead to naming conflicts"

  rails_pg_duplicate_table:
    description: "Attempts to create tables that already exist in the database, usually during migration rollbacks that aren't properly checking for existing tables."
    patterns:
      - "PG::DuplicateTable"
    causes:
      - "Creating a table that already exists"
      - "Migration rollback that doesn't properly check existence"
      - "Race conditions between parallel migrations"
      - "Incomplete cleanup of previous migration attempts"
      - "Missing conditional logic in migrations"
    solutions:
      - "Use `create_table_if_not_exists` instead of `create_table`"
      - "Add existence checks before table creation"
      - "Ensure proper rollback logic in migrations"
      - "Add proper up/down methods in reversible migrations"
      - "For repeated failures, check database state manually and correct inconsistencies"

  rails_pg_invalid_column_reference:
    description: "SQL syntax errors related to invalid column references, such as ordering by columns not in the select list in a DISTINCT query."
    patterns:
      - "PG::InvalidColumnReference"
    causes:
      - "ORDER BY clause referencing columns not in SELECT with DISTINCT"
      - "Referring to columns outside the current query scope"
      - "Column aliases used in WHERE before they're defined"
      - "Incorrect column names or typos"
      - "PostgreSQL syntax requirements not being followed"
    solutions:
      - "Ensure ORDER BY columns appear in the SELECT list when using DISTINCT"
      - "Add missing columns to SELECT clause"
      - "Use subqueries or CTEs to establish proper column scope"
      - "Check for typos or invalid column references"
      - "Restructure queries to follow PostgreSQL requirements"

  rails_pg_undefined_column:
    description: "References to columns that don't exist in database tables, typically occurring during schema changes or mismatched migrations."
    patterns:
      - "PG::UndefinedColumn"
    causes:
      - "Column doesn't exist in the table being queried"
      - "Column was removed but still referenced in code"
      - "Migration hasn't been run to add the column"
      - "Typo in column name"
      - "Schema changes not synchronized across environments"
    solutions:
      - "Verify column exists in the database schema"
      - "Check for typos in column names"
      - "Run pending migrations that may add the referenced column"
      - "Update code to match current schema after column removals"
      - "Use database inspection tools to confirm table structure"

  rails_pg_undefined_table:
    description: "References to tables that don't exist in the database, often seen during migration rollbacks or when tables are renamed/dropped."
    patterns:
      - "PG::UndefinedTable"
    causes:
      - "Table doesn't exist in the database"
      - "Table was dropped but still referenced in code"
      - "Migration hasn't been run to create the table"
      - "Incorrect schema or search path"
      - "Typo in table name"
    solutions:
      - "Verify table exists in the correct schema"
      - "Run pending migrations that create the table"
      - "Check for typos in table names"
      - "Ensure correct schema is being used"
      - "Update code references after table renames or removals"
      - "Check database schema with `\\dt` in psql or database inspection tools"

  rails_pg_sidekiq:
    description: "Sidekiq API routing errors in the database context, particularly related to unrouted Sidekiq Redis calls that should be inside a .via block."
    patterns:
      - "Gitlab::SidekiqSharding::Validator::UnroutedSidekiqApiError"
    causes:
      - "Sidekiq Redis calls made outside a .via routing block"
      - "Missing proper routing context for sharded Sidekiq operations"
      - "Direct Sidekiq API calls bypassing the routing layer"
      - "Missing Sidekiq client configuration"
      - "Code not adapted for Sidekiq sharding architecture"
    solutions:
      - "Wrap Sidekiq operations in appropriate .via blocks"
      - "Use Sidekiq::Client.via instead of direct API calls"
      - "Follow Sidekiq sharding guidelines in the documentation"
      - "Review recent changes to Sidekiq implementation"
      - "Check other Sidekiq-related files for correct patterns to follow"

  psql_failed_command:
    description: "Failures when executing PostgreSQL commands directly through psql, often seen during schema loading or database initialization."
    patterns:
      - "psql:.+ERROR:"
    causes:
      - "SQL syntax errors in scripts executed by psql"
      - "Database objects not existing when referenced"
      - "Permissions issues for psql operations"
      - "Connectivity problems to PostgreSQL server"
      - "Resource constraints or locks preventing execution"
    solutions:
      - "Check SQL syntax in scripts run by psql"
      - "Verify database objects exist before referencing them"
      - "Ensure proper permissions for database operations"
      - "Check database connectivity and configuration"
      - "Review PostgreSQL server logs for additional error context"
      - "Add error handling or conditional logic in scripts"

  rake_unallowed_schemas_accessed:
    description: "Unauthorized access attempts to restricted database schemas during rake tasks, which can happen when code tries to access tables outside its allowed scope."
    patterns:
      - "Gitlab::Database::QueryAnalyzers::RestrictAllowedSchemas::DMLAccessDeniedError:"
    causes:
      - "Query accessing tables in restricted or unauthorized schemas"
      - "Incorrect database connection used for schema-specific operations"
      - "Code not respecting database architecture boundaries"
      - "Migrations or rake tasks trying to span multiple schemas"
      - "Missing proper connection switching logic"
    solutions:
      - "Ensure queries only access tables in allowed schemas"
      - "Use appropriate connection objects for different schemas"
      - "Refactor code to respect schema boundaries"
      - "Follow GitLab's database architecture guidelines"
      - "Check documentation: https://docs.gitlab.com/ee/development/database/multiple_databases.html"

  rake_enqueue_from_transaction:
    description: "Attempts to enqueue Sidekiq jobs from within database transactions, which can lead to race conditions if the job runs before the transaction is committed."
    patterns:
      - "Sidekiq::Job::EnqueueFromTransactionError"
    causes:
      - "Enqueuing Sidekiq jobs inside a database transaction"
      - "Service objects creating jobs while in transactions"
      - "Missing transaction awareness in job scheduling code"
      - "Callbacks triggering job creation within transactions"
      - "Complex nested operations with implicit transactions"
    solutions:
      - "Move job enqueuing outside of transaction blocks"
      - "Use `after_commit` callbacks instead of `after_save`"
      - "Set up a post-transaction callback to create jobs"
      - "Use ApplicationRecord.transaction_open? to check before enqueuing"
      - "Refactor code to separate transaction and job creation logic"
      - "Use transactional_memoized_method for design pattern examples"

  rake_db_unknown_schema:
    description: "References to undefined database schemas in rake tasks, usually when configuration files are missing schema definitions."
    patterns:
      - "Gitlab::Database::GitlabSchema::UnknownSchemaError"
    causes:
      - "Missing schema definition in database dictionary"
      - "Incorrect schema reference in database operations"
      - "Configuration files missing required schema mappings"
      - "Database operations using undefined schemas"
      - "Table referenced but not defined in database catalog"
    solutions:
      - "Add the missing schema definition to db/docs yaml files"
      - "Run `bin/rails gitlab:db:dictionary:generate` to update definitions"
      - "Check for typos in schema references"
      - "Ensure tables are properly categorized in the database dictionary"
      - "Review database architecture documentation for schema requirements"

  rake_rails_unknown_primary_key:
    description: "Missing primary key definitions in ActiveRecord models, which can cause issues with record identification and association management."
    patterns:
      - "ActiveRecord::UnknownPrimaryKey"
    causes:
      - "Model class doesn't define primary_key and table has no id column"
      - "Custom primary key not specified in model"
      - "Table created without primary key"
      - "Accessing a view or query result without defined primary key"
      - "Joining tables in a way that obscures primary key"
    solutions:
      - "Add explicit primary_key definition to model: `self.primary_key = 'column_name'`"
      - "Ensure tables have appropriate primary keys"
      - "For views or custom queries, define primary_key or use methods that don't require it"
      - "Check schema design for tables without proper primary keys"
      - "Consider adding composite primary keys if appropriate"

  error_in_db_migration:
    description: "General errors occurring during database migrations that cause the migration and all subsequent migrations to be canceled."
    patterns:
      - "An error has occurred, this and all later migrations canceled"
      - "An error has occurred, all later migrations canceled"
    causes:
      - "SQL syntax errors in migrations"
      - "Referenced database objects don't exist"
      - "Schema inconsistencies between environments"
      - "Incomplete or incorrect migration logic"
      - "Dependent migrations not executed first"
    solutions:
      - "Check migration SQL syntax and logic"
      - "Verify all referenced database objects exist"
      - "Ensure migrations run in the correct order"
      - "Test migrations thoroughly in development before committing"
      - "Add more specific error handling in migrations"
      - "Review database state manually to identify inconsistencies"

  rails_invalid_sql_statement:
    description: "Invalid SQL statements in Rails ActiveRecord operations that cannot be executed by PostgreSQL due to syntax or semantic errors."
    patterns:
      - "ActiveRecord::StatementInvalid"
    causes:
      - "SQL syntax errors in queries"
      - "Referencing non-existent tables or columns"
      - "Type mismatches in query parameters"
      - "Incorrect join conditions or query structure"
      - "PostgreSQL constraints or rules violations"
    solutions:
      - "Check SQL syntax in queries and migrations"
      - "Verify referenced tables and columns exist"
      - "Ensure parameter types match column types"
      - "Review query structure for logical errors"
      - "Test complex queries in development environment first"
      - "Use database inspection tools to verify schema"

  graphql_lint:
    description: "GraphQL schema validation and linting errors, including outdated schema files that need to be regenerated or queries that fail validation."
    patterns:
      - "needs to be regenerated, please run:"
      - "GraphQL quer.+out of.+failed validation:"
    causes:
      - "GraphQL schema files out of sync with actual schema"
      - "Invalid GraphQL query syntax"
      - "Schema changes not reflected in generated files"
      - "Client-side queries using fields or types that don't exist"
      - "Modifications to GraphQL schema without updating definitions"
    solutions:
      - "Run the command suggested in the error message to regenerate schema files"
      - "Fix invalid GraphQL queries based on validation errors"
      - "Update client queries after schema changes"
      - "Check GraphQL schema changes for backward compatibility"
      - "Run GraphQL validation before committing changes"
      - "Use GraphQL sandbox to verify query validity"

  eslint:
    description: "JavaScript code style and quality issues detected by ESLint, the JavaScript linter used in GitLab's frontend development."
    patterns:
      - "node scripts/frontend/eslint.js . --format gitlab"
      - "Running ESLint with the following rules enabled"
    causes:
      - "JavaScript code not following style guidelines"
      - "Missing semicolons, improper formatting, or syntax issues"
      - "Use of deprecated or disallowed JavaScript patterns"
      - "Accessibility (a11y) violations in code"
      - "Unused variables or imports"
    solutions:
      - "Run ESLint locally to identify and fix issues: `yarn run lint:eslint`"
      - "Consider using `yarn run lint:eslint:fix` to automatically fix simple issues"
      - "Review ESLint errors and update code to follow style guidelines"
      - "Address specific rule violations mentioned in the error output"
      - "Check GitLab's frontend development guidelines"
      - "For persistent issues, consider ESLint configuration adjustments"

  docs_lint_failed:
    description: "Documentation linting failures, including formatting issues, broken links, and other quality checks for GitLab's documentation."
    patterns:
      - "ERROR: lint test\\(s\\) failed.+Review the log carefully to see full listing"
      - "files inspected,.+lints? detected"
      - "Issues found in .+input.+Find details below."
      - "scripts/lint-docs-redirects.rb"
      - "git diff --exit-code db/docs"
    causes:
      - "Markdown formatting errors"
      - "Broken links in documentation"
      - "Style guide violations in docs"
      - "Invalid redirects in documentation"
      - "Inconsistent formatting or structure"
      - "Missing required sections in documentation"
    solutions:
      - "Run documentation linting locally: `bundle exec rake gitlab:docs:lint`"
      - "Fix formatting according to style guide"
      - "Update or remove broken links"
      - "Check redirects with `scripts/lint-docs-redirects.rb`"
      - "Follow documentation structure guidelines"
      - "Address specific issues highlighted in the linting output"

  docs_outdated:
    description: "Outdated documentation that needs to be regenerated, typically seen when code changes affect documented features or APIs."
    patterns:
      - "documentation is outdated.+Please update it by running"
    causes:
      - "Code changes affecting documented APIs or features"
      - "Schema changes not reflected in documentation"
      - "Auto-generated docs not updated after changes"
      - "Documentation dependencies out of sync"
      - "API changes without corresponding doc updates"
    solutions:
      - "Run the command provided in the error message to update docs"
      - "Ensure documentation is updated when code changes"
      - "Follow the documentation process for API changes"
      - "Regenerate schema-dependent documentation"
      - "Review and test documentation changes for accuracy"

  cells_lint:
    description: "Linting failures in Cells-related code and configuration, particularly around application settings definition files."
    patterns:
      - "scripts/cells/ci-ensure-application-settings-have-definition-file.rb"
    causes:
      - "Missing definition files for application settings"
      - "Inconsistencies between settings and definitions"
      - "Improper formatting of settings definition files"
      - "Changes to application settings without updating definitions"
      - "Cells architecture violations"
    solutions:
      - "Create missing definition files for application settings"
      - "Ensure definition files match actual application settings"
      - "Follow the Cells architecture guidelines"
      - "Check for proper YAML formatting in definition files"
      - "Refer to existing definition files for examples of correct structure"

  pajamas_violations:
    description: "Violations of Pajamas design system requirements, GitLab's design system that ensures consistent UI components and experiences."
    patterns:
      - "blocking Pajamas violation\\(s\\) found."
      - "Merge request scan exit status: 2"
    causes:
      - "Using non-Pajamas UI components or styles"
      - "Incorrect implementation of Pajamas components"
      - "CSS/SCSS that doesn't follow design system guidelines"
      - "Accessibility violations in UI components"
      - "Custom styling that conflicts with Pajamas standards"
    solutions:
      - "Replace custom UI components with Pajamas equivalents"
      - "Follow Pajamas implementation guidelines"
      - "Use Pajamas utility classes instead of custom CSS"
      - "Address accessibility issues highlighted in the report"
      - "Refer to Pajamas documentation: https://design.gitlab.com"
      - "Consult with UX team for complex component needs"

  yaml_lint_failed:
    description: "YAML syntax and formatting issues detected by yamllint, which checks for problems in YAML configuration files."
    patterns:
      - "yamllint "
    causes:
      - "YAML syntax errors"
      - "Indentation issues in YAML files"
      - "Line length violations"
      - "Missing or duplicate keys"
      - "Incorrect spacing or formatting"
    solutions:
      - "Fix YAML syntax errors"
      - "Correct indentation (usually 2 spaces)"
      - "Resolve line length and structure issues"
      - "Check for duplicate keys"
      - "Validate YAML files with tools like yamllint locally"
      - "Follow YAML best practices and style guides"

  rake_some_po_files_invalid:
    description: "Invalid translation files (PO files) detected during rake tasks, usually containing syntax errors or formatting issues."
    patterns:
      - "Not all PO-files are valid"
    causes:
      - "Syntax errors in PO files"
      - "Incorrect formatting in translation strings"
      - "Missing or invalid message IDs"
      - "Unescaped special characters in translations"
      - "Inconsistent line endings or encoding issues"
    solutions:
      - "Check syntax of invalid PO files"
      - "Fix formatting issues in translation strings"
      - "Ensure proper escaping of special characters"
      - "Validate PO files with tools like msgfmt"
      - "Use consistent encoding (usually UTF-8)"
      - "Follow gettext PO file formatting guidelines"

  rake_outdated_translated_strings:
    description: "Outdated translation strings that need to be updated to match changes in the source language strings."
    patterns:
      - "Changes in translated strings found, please update file"
    causes:
      - "Source language strings changed but translations not updated"
      - "New strings added without translations"
      - "Translation files out of sync with source code"
      - "Removed strings still present in translation files"
      - "Translation process not completed for recent changes"
    solutions:
      - "Run the command suggested in the error to update translation files"
      - "Update translations for changed source strings"
      - "Remove translations for strings no longer in use"
      - "Follow translation workflow for string changes"
      - "Use proper internationalization practices for new strings"

  docs_deprecations_outdated:
    description: "Outdated documentation about deprecated features that needs to be updated to reflect current deprecation status."
    patterns:
      - "ERROR: Deprecations documentation is outdated"
    causes:
      - "New deprecations not documented"
      - "Deprecated features removed but still listed in docs"
      - "Deprecation timeframe changed but not updated in docs"
      - "Inconsistencies between code deprecations and documentation"
      - "Deprecation documentation format not followed"
    solutions:
      - "Run command suggested in the error to update deprecation docs"
      - "Add documentation for new deprecated features"
      - "Remove documentation for removed deprecated features"
      - "Update deprecation timeframes in documentation"
      - "Follow deprecation documentation guidelines"
      - "Ensure deprecation notices match actual code status"

  frontend_lockfile:
    description: "Issues with frontend dependency lockfiles, including Yarn lockfile inconsistencies that need to be resolved."
    patterns:
      - "Found problems with the lockfile"
      - "Your lockfile needs to be updated, but yarn was run with"
    causes:
      - "Yarn lockfile out of sync with package.json"
      - "Running yarn with --frozen-lockfile when changes are needed"
      - "Dependency version conflicts"
      - "Manual edits to lockfile"
      - "Different yarn versions between developers and CI"
    solutions:
      - "Run `yarn install` without --frozen-lockfile to update lockfile"
      - "Resolve dependency conflicts in package.json"
      - "Avoid manual edits to yarn.lock"
      - "Use consistent yarn versions across environments"
      - "For CI issues, update lockfile locally and commit changes"
      - "Consider running yarn dedupe to fix duplicate packages"

  yarn_dependency_violation:
    description: "Peer dependency violations in Yarn packages, where installed packages don't meet the version requirements of their dependents."
    patterns:
      - "Peer dependency violation"
    causes:
      - "Package versions not satisfying peer dependencies"
      - "Conflicting version requirements between packages"
      - "Outdated dependencies with incompatible peers"
      - "Using packages with explicit version constraints"
      - "Major version upgrades with breaking changes"
    solutions:
      - "Update package versions to satisfy peer dependencies"
      - "Resolve version conflicts by updating packages"
      - "Check for available versions that satisfy all peers"
      - "For complex conflicts, consider yarn resolutions"
      - "Update dependent packages to versions with compatible requirements"
      - "Review package release notes for compatibility changes"

  yarn_run:
    description: "Failures in Yarn script execution, typically in frontend build, test, or lint commands."
    patterns:
      - "yarn run.+failed with the following error"
    causes:
      - "Script configuration errors"
      - "Build process failures"
      - "Missing dependencies or tools"
      - "Environment configuration issues"
      - "Node.js version incompatibilities"
      - "Resource constraints during build"
    solutions:
      - "Check the specific error in the yarn script output"
      - "Run the failing script locally to debug"
      - "Verify all dependencies are installed"
      - "Check for Node.js version requirements"
      - "Review script configuration in package.json"
      - "Look for recent changes that might affect the build process"

  gemfile_issues:
    description: "Issues with Ruby gem dependencies and Gemfile lockfiles, including outdated dependencies, checksum mismatches, and conflicting gems."
    patterns:
      - "changed, but the lockfile can't be updated"
      - "Your lockfile does not satisfy dependencies of"
      - "contains outdated dependencies"
      - "You have already activated"
      - "but your Gemfile requires"
      - "\\(r-\\)generate Gemfile.checksum with"
      - "Bundler cannot continue installing"
      - "Cached checksum for .+ not found"
    causes:
      - "Gemfile and Gemfile.lock out of sync"
      - "Dependency conflicts between gems"
      - "Outdated gems or version constraints"
      - "Checksum verification failures"
      - "Inconsistent gem environment between development and CI"
      - "Manual edits to Gemfile.lock"
    solutions:
      - "Run `bundle install` to update Gemfile.lock"
      - "Generate or update checksums with `bundle exec bundler-checksum init`"
      - "Resolve dependency conflicts by updating gem versions"
      - "Check for version constraint issues in Gemfile"
      - "For frozen bundle issues, run without --frozen flag"
      - "Update outdated gems to compatible versions"
      - "Follow Gemfile best practices in GitLab documentation"

  gems_not_found:
    description: "Missing Ruby gems required by the application, which can happen when dependencies aren't properly installed or configured."
    patterns:
      - "Bundler::GemNotFound"
    causes:
      - "Gem listed in Gemfile but not installed"
      - "Gem source unavailable or unreachable"
      - "Version constraints that cannot be satisfied"
      - "Network issues during gem installation"
      - "Platform-specific gems missing on current platform"
    solutions:
      - "Run `bundle install` to install missing gems"
      - "Check gem source availability and connectivity"
      - "Review version constraints for feasibility"
      - "For platform-specific issues, specify platform in Gemfile"
      - "Check for typos in gem names"
      - "Verify gem exists in specified sources"

  gems_build:
    description: "Failures during gem native extension building, which often occur with gems that have C extensions that fail to compile."
    patterns:
      - "Gem::Ext::BuildError: ERROR: Failed to build gem native extension."
    causes:
      - "Missing build dependencies (compilers, libraries)"
      - "Incompatible C library versions"
      - "Platform-specific build issues"
      - "Header files missing for required libraries"
      - "System resource constraints during compilation"
    solutions:
      - "Install required build dependencies"
      - "For PostgreSQL-related gems, install libpq-dev or equivalent"
      - "For nokogiri, ensure libxml2-dev and other dependencies are available"
      - "Check for specific compilation errors in the build output"
      - "Use pre-compiled gems when available"
      - "Consult gem-specific documentation for build requirements"

  bao_linux_checksum_mismatch:
    description: "Checksum verification failures for the bao-linux-amd64 binary, used for OpenBao secrets management in GitLab."
    patterns:
      - "ERROR: Checksum mismatch for `bao-linux-amd64`"
    causes:
      - "Binary download corruption or truncation"
      - "Expected checksum out of date"
      - "Wrong binary version downloaded"
      - "Intentional binary modifications"
      - "Network issues during download"
    solutions:
      - "Clear cached binaries and retry download"
      - "Update expected checksum if using a new version"
      - "Verify download source is correct"
      - "Check for network proxy or firewall issues"
      - "Manually download and verify the binary"
      - "Report issue if persistent across multiple attempts"

  gemnasium-python-dependency_scanning:
    description: "Failures in Python dependency scanning with Gemnasium, typically related to pipenv sync issues in dependency scanning jobs."
    patterns:
      - "running /usr/local/bin/pipenv sync .+: exit status 1"
      - "\\[gemnasium-python\\] .+ pipenv sync failed"
    causes:
      - "Python dependency conflicts"
      - "Missing or incompatible Python version"
      - "Pipenv lock file inconsistencies"
      - "Network issues during dependency resolution"
      - "Resource constraints during installation"
    solutions:
      - "Update Pipfile.lock using `pipenv lock`"
      - "Resolve dependency conflicts in Pipfile"
      - "Ensure correct Python version is available"
      - "Check for private packages requiring authentication"
      - "Verify all dependencies are accessible in CI environment"
      - "For persistent issues, try recreating the virtual environment"

  dependency-scanning_permission_denied:
    description: "Permission issues during dependency scanning, where the scanner cannot access files due to insufficient permissions."
    patterns:
      - "\\[FATA\\] \\[dependency-scanning\\].+ permission denied"
    causes:
      - "Scanner running with insufficient permissions"
      - "File or directory permission issues"
      - "Docker volume mount permission problems"
      - "Restrictive umask settings"
      - "Protected files or directories"
    solutions:
      - "Check file permissions in the project directory"
      - "Ensure Docker volume mounts have correct permissions"
      - "Verify the scanner is running with appropriate user privileges"
      - "Adjust umask settings if needed"
      - "For Docker-based scanners, check container user configuration"
      - "Consider adding permission checks to pre-scan steps"

  package_hunter:
    description: "Errors in package monitoring and tracking services, used to scan for vulnerabilities in project dependencies."
    patterns:
      - "Error calling /monitor/project/"
    causes:
      - "Service API connectivity issues"
      - "Invalid or expired authentication credentials"
      - "Rate limiting or quota exhaustion"
      - "Service outage or maintenance"
      - "Incompatible project configuration"
    solutions:
      - "Check connectivity to package monitoring services"
      - "Verify authentication tokens are valid and not expired"
      - "Look for rate limiting headers in responses"
      - "Check service status and maintenance announcements"
      - "Ensure project configuration is compatible with the service"
      - "Retry scan during lower usage periods if rate limited"

  git_issues:
    description: "Git repository and version control related failures, including cloning issues, reference problems, and connectivity errors."
    patterns:
      - "cloning repository: exit status 128"
      - "did not match any file\\(s\\) known to git"
      - "fatal: couldn't find remote ref"
      - "fatal: expected flush after ref listing"
      - "fatal: fetch-pack: invalid index-pack output"
      - "fatal: Not a valid object name"
      - "fatal: protocol error: bad pack header"
      - "fatal: the remote end hung up unexpectedly"
      - "TimeoutExpired: Command '\\['git', 'fetch'"
    causes:
      - "Network connectivity issues to Git repositories"
      - "Invalid or non-existent Git references (branches, tags)"
      - "Large repository transfer issues"
      - "Authentication or permission problems"
      - "Git protocol errors or incompatibilities"
      - "Repository corruption or inconsistency"
    solutions:
      - "Check network connectivity to Git servers"
      - "Verify branch, tag, or commit references exist"
      - "Ensure authentication credentials are correct"
      - "For large repositories, try shallow cloning"
      - "Check for Git version compatibility issues"
      - "Try with increased Git buffer sizes or timeouts"
      - "For reference errors, verify the branch or tag exists"

  as_if_foss_git_push_issues:
    description: "Git push failures in the as-if-FOSS pipeline, which creates a mirror of the GitLab codebase without EE-specific code."
    patterns:
      - "failed to push some refs to 'https://gitlab.com/gitlab-org/gitlab-foss.git'"
    causes:
      - "Authentication or permission issues with the target repository"
      - "Force push required but not specified"
      - "Target branch protected from pushes"
      - "Remote repository rejecting changes"
      - "Concurrent modifications to target repository"
    solutions:
      - "Check authentication tokens and permissions for the target repository"
      - "Verify CI user has push access to the target repository"
      - "For non-fast-forward updates, use force push if appropriate"
      - "Check target repository branch protection rules"
      - "Ensure target repository is not in a locked state"
      - "Retry the job after resolving concurrent modification conflicts"

  rubocop:
    description: "Ruby code style and quality issues detected by RuboCop, the Ruby linter and static code analyzer used in GitLab's backend development."
    patterns:
      - "offenses? detected"
      - "=== Filtered warnings ==="
    causes:
      - "Ruby code not following style guidelines"
      - "Code quality issues detected by static analysis"
      - "Formatting inconsistencies in Ruby code"
      - "Use of deprecated or discouraged Ruby patterns"
      - "Missing documentation or code structure issues"
    solutions:
      - "Run RuboCop locally to identify issues: `bundle exec rubocop`"
      - "Fix style issues with auto-correct when possible: `bundle exec rubocop -a`"
      - "Address specific rule violations mentioned in output"
      - "Follow GitLab's Ruby style guide"
      - "For unavoidable violations, use inline comments to disable specific rules"
      - "Keep .rubocop.yml updated if rules need adjustments"

  jest:
    description: "JavaScript test failures in Jest test suites, used for testing GitLab's frontend code."
    patterns:
      - "Command .+ node_modules/.bin/jest.+ exited with status 1"

  rspec_undercoverage:
    description: "Insufficient test coverage detected in the codebase, where methods or classes lack adequate test coverage."
    patterns:
      - "some methods have no test coverage!"
    causes:
      - "New code added without corresponding tests"
      - "Tests exist but don't execute all code paths"
      - "Missing test cases for edge conditions"
      - "Test execution not reaching all methods"
      - "Coverage calculation issues"
    solutions:
      - "Add tests for uncovered methods"
      - "Expand existing tests to cover more code paths"
      - "Check coverage reports to identify specific gaps"
      - "Follow TDD practices to ensure coverage"
      - "Update coverage thresholds if necessary"
      - "For intentional exceptions, document why coverage isn't needed"

  gitaly_spawn_failed:
    description: "Failures in spawning Gitaly service processes, which handle Git operations in GitLab."
    patterns:
      - "gitaly spawn failed"
    causes:
      - "Gitaly binary missing or incorrect permissions"
      - "Configuration issues for Gitaly service"
      - "Resource constraints preventing process spawn"
      - "Port conflicts or availability issues"
      - "Dependencies required by Gitaly not available"
    solutions:
      - "Check Gitaly binary existence and permissions"
      - "Verify Gitaly configuration is correct"
      - "Ensure required ports are available"
      - "Check system resource availability (memory, file descriptors)"
      - "Review Gitaly logs for specific startup errors"
      - "Verify all Gitaly dependencies are installed"

  apollo:
    description: "Issues with Apollo GraphQL client configuration or operation, used for frontend GraphQL interactions."
    patterns:
      - "Loading Apollo Project"
    causes:
      - "Apollo GraphQL client misconfiguration"
      - "Schema synchronization issues between client and server"
      - "Network problems when fetching GraphQL schema"
      - "Incompatible Apollo client versions with current GraphQL schema"
      - "GraphQL query validation errors during schema loading"
      - "Missing or malformed GraphQL schema definition files"
    solutions:
      - "Check Apollo client configuration in config/apollo.config.js"
      - "Run schema fetching commands locally to debug issues"
      - "Verify network connectivity to GraphQL endpoints"
      - "Update Apollo client dependencies to versions compatible with your schema"
      - "Validate GraphQL queries against the schema"
      - "Regenerate GraphQL schema files using appropriate commands"

  rspec_test_already_failed_on_default_branch:
    description: "Tests that are already failing on the default branch, indicated by exit code 112. These failures are not introduced by the current changes."
    patterns:
      - "ERROR: Job failed: exit code 112"
    causes:
      - "Test already failing on the default branch"
      - "Broken master or main branch tests"
      - "Known flaky tests that need attention"
      - "Legacy test failures that aren't yet fixed"
      - "Infrastructure issues affecting both branches"
    solutions:
      - "Ignore these failures as they're not caused by your changes"
      - "Consider fixing the broken test on the default branch separately"
      - "Add issue to track persistent test failures"
      - "Check if test is marked as quarantined"
      - "If fixing in the current MR, note that it addresses existing failures"
      - "For widespread issues, escalate to maintainers"

  assets_compilation:
    description: "Failures during frontend asset compilation with webpack, used to bundle JavaScript, CSS, and other assets."
    patterns:
      - "Error: Unable to compile webpack production bundle"
    causes:
      - "JavaScript syntax errors"
      - "Missing dependencies or incorrect versions"
      - "Webpack configuration issues"
      - "Memory constraints during compilation"
      - "Incompatible module formats or imports"
    solutions:
      - "Check JavaScript files for syntax errors"
      - "Verify all dependencies are installed and compatible"
      - "Review webpack configuration for issues"
      - "Run compilation locally to debug with more detailed output"
      - "For memory issues, increase available memory or optimize build"
      - "Check for circular dependencies or other module issues"

  webpack_cli:
    description: "Webpack CLI execution errors, typically related to file system operations during the build process."
    patterns:
      - "webpack-cli.+Error: EEXIST: file already exists"
    causes:
      - "File system conflicts during build"
      - "Concurrent builds writing to same location"
      - "Incomplete cleanup from previous builds"
      - "Permission issues with output directories"
      - "Webpack configuration targeting existing files without overwrite"
    solutions:
      - "Clean build output directory before compiling"
      - "Fix webpack configuration to handle existing files"
      - "Ensure proper permissions on output directories"
      - "Add error handling for file system operations"
      - "Avoid concurrent builds to same output location"
      - "Check for disk space or inode exhaustion"

  vuejs3:
    description: "Compatibility issues with Vue.js 3 migrations, as GitLab transitions from Vue 2 to Vue 3 in its frontend code."
    patterns:
      - "Expected unset environment variable"
      - "either now pass under Vue 3, or no longer exist"
    causes:
      - "Vue 3 compatibility breaking changes"
      - "Components using deprecated Vue 2 features"
      - "Migration issues between Vue versions"
      - "Environment configuration issues"
      - "Tests expecting Vue 2 behavior in Vue 3 context"
    solutions:
      - "Update components to follow Vue 3 compatibility guidelines"
      - "Remove use of deprecated Vue 2 features"
      - "Check migration guide for required changes: https://v3-migration.vuejs.org/"
      - "Fix environment variable configuration as specified in error"
      - "Update tests to work with Vue 3 behavior"
      - "For complex components, consider incremental migration approach"

  rspec_usage:
    description: "Improper usage of RSpec testing framework features, including issues with doubles, shared contexts, and other testing patterns."
    patterns:
      - "The use of doubles or partial doubles from rspec-mocks outside of the per-test lifecycle is not supported."
      - "Could not find shared context"
      - "Could not find shared examples"
      - "is not available on an example group"
    causes:
      - "Using test doubles outside proper lifecycle"
      - "Missing or incorrectly referenced shared contexts/examples"
      - "Incorrect RSpec API usage"
      - "WebMock preventing allowed network connections"
      - "RSpec configuration or setup issues"
    solutions:
      - "Only create test doubles within proper test lifecycle methods"
      - "Verify shared context/example names and paths"
      - "Ensure proper RSpec API usage according to documentation"
      - "For WebMock issues, allow necessary connections or use stub_request"
      - "Review RSpec best practices and correct usage patterns"
      - "Check for typos in shared context or example names"

  gitlab_too_much_load:
    description: "Situations where GitLab instance is under excessive load and unable to handle requests, typically seen in pipeline or API interactions."
    patterns:
      - "GitLab is currently unable to handle this request due to load."
    causes:
      - "High server load or resource exhaustion"
      - "Insufficient resources allocated to GitLab instance"
      - "Database performance issues under load"
      - "Background job backlogs creating contention"
      - "Traffic spikes exceeding capacity"
    solutions:
      - "Retry the operation after a delay"
      - "Check GitLab instance health and resource usage"
      - "Monitor for sustained high load conditions"
      - "Consider scaling resources if consistently overloaded"
      - "Look for inefficient queries or operations during peak load"
      - "Implement rate limiting or traffic shaping if needed"

  failed_to_pull_image:
    description: "Docker image pull failures in CI/CD, where container images cannot be downloaded from the registry."
    patterns:
      - "ERROR: Job failed: failed to pull image"
    causes:
      - "Docker registry unavailable or unreachable"
      - "Authentication issues with registry"
      - "Image does not exist or wrong tag specified"
      - "Network connectivity problems"
      - "Rate limiting on registry pulls"
    solutions:
      - "Verify image name and tag are correct"
      - "Check authentication credentials for private registries"
      - "Ensure network connectivity to the registry"
      - "For rate limiting, use authenticated pulls or reduce frequency"
      - "Use image mirroring for frequently used images"
      - "Check registry status for outages"

  docker_not_running:
    description: "Issues where the Docker daemon is not running or is unavailable, preventing container operations."
    patterns:
      - "Is the docker daemon running"
    causes:
      - "Docker service not running on runner"
      - "Docker socket not accessible"
      - "Permission issues accessing Docker"
      - "Docker configuration problems"
      - "Resource exhaustion preventing Docker operations"
    solutions:
      - "Ensure Docker service is running"
      - "Check Docker socket permissions"
      - "Verify user has permission to access Docker"
      - "Restart Docker service if possible"
      - "Check Docker logs for specific errors"
      - "For runners, ensure Docker is properly configured"

  no_space_left:
    description: "Insufficient disk space on the CI/CD runner, causing file operations to fail due to lack of storage."
    patterns:
      - "no space left on device"
      - "There was insufficient space remaining on the device"
    causes:
      - "Runner disk space exhausted"
      - "Large artifacts or build outputs filling disk"
      - "Inadequate cleanup between jobs"
      - "Docker layers or images consuming space"
      - "Log files or core dumps accumulating"
    solutions:
      - "Clean up unnecessary files during build"
      - "Reduce artifact size or split into smaller artifacts"
      - "Add cleanup steps in before_script or after_script"
      - "For Docker runners, prune images and volumes regularly"
      - "Consider using runners with more disk space"
      - "Optimize build process to use less disk space"

  artifacts_upload_502:
    description: "Bad Gateway errors (HTTP 502) during CI/CD artifact uploads, typically due to network or server issues."
    patterns:
      - "Uploading artifacts .+ 502 Bad Gateway"
    causes:
      - "GitLab artifact storage service issues"
      - "Network problems during upload"
      - "Large artifacts timing out during transfer"
      - "Load balancer or proxy problems"
      - "Temporary service degradation"
    solutions:
      - "Retry the job after a delay"
      - "Reduce artifact size if possible"
      - "Split large artifacts into smaller ones"
      - "Check GitLab status page for ongoing issues"
      - "Verify network stability between runner and GitLab"
      - "For persistent issues, report to GitLab support"

  http_500:
    description: "HTTP 500 Internal Server errors when interacting with web services, indicating server-side problems."
    patterns:
      - "500 Internal Server Error"
    causes:
      - "Server-side application errors"
      - "Database connectivity or query issues"
      - "Resource exhaustion on server"
      - "Unhandled exceptions in server code"
      - "Infrastructure or deployment problems"
    solutions:
      - "Check server logs for detailed error information"
      - "Verify server dependencies are available and working"
      - "For GitLab API issues, check GitLab instance health"
      - "Retry operations after a delay for transient issues"
      - "Reduce request complexity or payload size if applicable"
      - "Report persistent server errors to service maintainers"

  kubernetes:
    description: "Kubernetes cluster connectivity or operation issues, affecting containerized deployments and tests."
    patterns:
      - "Error: Kubernetes cluster unreachable"
    causes:
      - "Kubernetes API server unavailable"
      - "Authentication or authorization issues"
      - "Network connectivity problems"
      - "Misconfiguration of cluster access"
      - "Certificate or TLS issues"
    solutions:
      - "Verify Kubernetes cluster is running and healthy"
      - "Check authentication credentials and certificates"
      - "Test connectivity to Kubernetes API endpoint"
      - "Ensure proper RBAC permissions for operations"
      - "Check for network policy or firewall restrictions"
      - "Verify kubeconfig is correctly configured"

  http_502:
    description: "HTTP 502 Bad Gateway errors when interacting with web services, indicating proxy or intermediate server issues."
    patterns:
      - "502 Server Error"
      - "502 \"Bad Gateway\""
      - "status code: 502"
    causes:
      - "Load balancer or proxy issues"
      - "Backend service unavailable or timing out"
      - "Network connectivity problems between servers"
      - "Server overload or resource exhaustion"
      - "Misconfiguration in proxy or gateway"
    solutions:
      - "Retry the request after a delay"
      - "Check service status for outages"
      - "Verify network connectivity between services"
      - "For GitLab.com issues, check status page"
      - "Reduce request complexity or frequency"
      - "If persistent, report to infrastructure team"

  gitlab_unavailable:
    description: "Situations where GitLab instance is unavailable or unresponsive, preventing API requests or Git operations."
    patterns:
      - "The requested URL returned error: 500"
      - "GitLab is not responding"
      - "fatal: unable to access 'https://gitlab.com"
    causes:
      - "GitLab service outage or maintenance"
      - "Network connectivity issues"
      - "Server errors in the GitLab application"
      - "Rate limiting or temporary access restrictions"
      - "DNS resolution problems"
    solutions:
      - "Check GitLab status page for known outages"
      - "Verify network connectivity to GitLab servers"
      - "Retry operations after a delay"
      - "Check for rate limiting or access restrictions"
      - "Verify DNS resolution is working correctly"
      - "For persistent issues, contact GitLab support"

  postgresql_unavailable:
    description: "PostgreSQL database connection failures, where the database is unreachable or returns connection errors."
    patterns:
      - "PG::ConnectionBad"
    causes:
      - "PostgreSQL server not running"
      - "Database connectivity issues"
      - "Authentication failures"
      - "Resource exhaustion on database server"
      - "Misconfigured connection parameters"
    solutions:
      - "Verify PostgreSQL server is running"
      - "Check network connectivity to database server"
      - "Ensure database credentials are correct"
      - "Review database server logs for specific errors"
      - "Check resource usage on database server"
      - "Verify database connection configuration"

  artifacts_not_found_404:
    description: "CI/CD artifacts not found (HTTP 404 errors), typically when trying to download artifacts from previous jobs that don't exist."
    patterns:
      - "Downloading artifacts from coordinator... not found"
    causes:
      - "Artifacts expired or were never created"
      - "Job reference incorrect or doesn't exist"
      - "Permissions issue accessing artifacts"
      - "Artifacts were purged or manually deleted"
      - "Job didn't complete successfully to generate artifacts"
    solutions:
      - "Verify the referenced job exists and completed successfully"
      - "Check artifact expiration settings"
      - "Ensure correct job and project references for artifacts"
      - "Verify permissions to access artifacts"
      - "For missing dependencies, check if jobs are properly linked"
      - "Regenerate artifacts by re-running upstream jobs if needed"

  rails-production-server-boot:
    description: "Rails production server boot failures, where the application server fails to start or respond to requests on expected ports."
    patterns:
      - "curl: \\(7\\) Failed to connect to 127.0.0.1 port 3000 after"
      - "curl: \\(7\\) Failed to connect to 127.0.0.1 port 8080 after"
    causes:
      - "Rails server failed to start properly"
      - "Server crashed during initialization"
      - "Port conflicts preventing server from binding"
      - "Configuration errors in Rails environment"
      - "Resource constraints during server boot"
    solutions:
      - "Check Rails server logs for startup errors"
      - "Verify ports are available and not in use"
      - "Check environment configuration for production mode"
      - "Ensure database and other dependencies are available"
      - "Monitor resource usage during server startup"
      - "Try starting the server manually to debug issues"

  redis:
    description: "Redis connection or operation issues, affecting caching, queuing, and other Redis-dependent services."
    patterns:
      - "Redis client could not fetch cluster information"
    causes:
      - "Redis server not running or unreachable"
      - "Authentication failures with Redis"
      - "Redis cluster configuration issues"
      - "Network connectivity problems"
      - "Redis memory or resource exhaustion"
    solutions:
      - "Verify Redis server is running and accessible"
      - "Check Redis connection configuration"
      - "Ensure authentication credentials are correct"
      - "For clusters, verify all nodes are healthy"
      - "Check Redis server logs for specific errors"
      - "Monitor Redis memory usage and resource constraints"

  cng:
    description: "Cloud Native GitLab container image issues, affecting containerized GitLab deployments and related tools."
    patterns:
      - "=== block '.+' error ==="
      - "failed to load command: orchestrator"
    causes:
      - "Container build process failures for Cloud Native GitLab"
      - "Missing or incompatible dependencies in CNG images"
      - "Configuration errors in Helm charts or Kubernetes manifests"
      - "Resource constraints during containerization process"
      - "Incompatible component versions in the container stack"
      - "Failed orchestration scripts during deployment"
    solutions:
      - "Check CNG build logs for specific block errors and failures"
      - "Verify dependencies are correctly specified in container definitions"
      - "Review CNG component configuration files for errors"
      - "Ensure sufficient resources for container builds (memory, disk)"
      - "Update component versions to compatible releases"
      - "Review orchestrator scripts for errors or missing dependencies"

  build_gdk_image:
    description: "Failures during GitLab Development Kit image building, used for local development environments."
    patterns:
      - "Building GDK image"
    causes:
      - "Docker build process errors for GDK images"
      - "Missing build dependencies for GDK"
      - "Resource constraints during image build (CPU, memory, disk)"
      - "Incompatible base image or operating system versions"
      - "Network issues when fetching dependencies"
      - "File permission problems in the build context"
    solutions:
      - "Check specific error details in the Docker build output"
      - "Ensure Docker has sufficient resources allocated"
      - "Verify network connectivity for dependency fetching"
      - "Update base images to compatible versions"
      - "Check for incompatible software versions in the build"
      - "Review GDK documentation for version-specific requirements"

  build_qa_image:
    description: "Failures during QA image building, used for end-to-end testing of GitLab."
    patterns:
      - "Building QA image for"
    causes:
      - "Docker build errors for QA testing images"
      - "Missing or incompatible Ruby dependencies"
      - "Network connectivity issues during build"
      - "Resource constraints (memory, disk space) during build"
      - "Version incompatibilities in dependencies"
      - "Base image issues or incompatibilities"
    solutions:
      - "Check Docker build logs for specific errors"
      - "Ensure sufficient resources for image building"
      - "Verify network connectivity for dependency downloads"
      - "Update dependency versions in QA Dockerfile if needed"
      - "Check Ruby version compatibility with QA framework"
      - "Review Gemfile.lock for conflicting dependencies"

  pg_query_canceled:
    description: "PostgreSQL query cancellation errors in tests, typically due to long-running queries or timeout configurations."
    patterns:
      - "We have detected a PG::QueryCanceled error in the specs, so we're failing early."
    causes:
      - "Long-running database queries hitting timeout limits"
      - "Inefficient queries with missing indexes"
      - "Queries operating on large datasets without proper limits"
      - "Resource contention slowing query execution"
      - "Statement timeout configuration too restrictive for test scenarios"
      - "Deadlocks or lock contention in database"
    solutions:
      - "Optimize slow queries with proper indexes"
      - "Review and improve query efficiency (EXPLAIN ANALYZE)"
      - "Add pagination or batching for large dataset operations"
      - "Check for table locks or resource contention"
      - "Review database query plans for inefficient operations"
      - "Consider appropriate statement timeout settings for test environment"

  rake_invalid_feature_flag:
    description: "Invalid feature flag configurations detected, such as improper default settings or missing definition files."
    patterns:
      - "Feature::InvalidFeatureFlagError: "
    causes:
      - "Feature flag definition missing required attributes"
      - "Invalid default value for feature flag"
      - "Inconsistent feature flag configuration across files"
      - "Improper feature flag type specification"
      - "Missing or incorrect feature group definitions"
      - "Feature flag YAML definition syntax errors"
    solutions:
      - "Check feature flag definition for required attributes"
      - "Ensure default values are appropriate for flag type"
      - "Follow feature flag definition guidelines in documentation"
      - "Verify feature groups are properly defined"
      - "Review feature flag documentation for correct structure"
      - "Run `bin/feature-flags verify` to check for issues"

  rake_new_version_of_sprockets:
    description: "Outdated Sprockets asset pipeline patching that is no longer needed with newer versions of Sprockets."
    patterns:
      - "New version of Sprockets detected. This patch can likely be removed."
    causes:
      - "Upgraded Sprockets version but kept old compatibility patches"
      - "Legacy code for Sprockets compatibility no longer needed"
      - "Asset pipeline configuration not updated for newer Sprockets"
      - "Custom Sprockets patches that conflict with new version"
      - "Using deprecated Sprockets configuration options"
    solutions:
      - "Remove the outdated Sprockets patches mentioned in the error"
      - "Update asset pipeline configuration for current Sprockets version"
      - "Check for deprecated Sprockets features being used"
      - "Follow upgrade guide for current Sprockets version"
      - "Test asset compilation after removing patches"
      - "Update custom extensions to use current Sprockets API"

  rake_task_not_found:
    description: "Referenced rake tasks that don't exist, typically due to typos or removed tasks."
    patterns:
      - "Don't know how to build task.+See the list of available tasks with"
    causes:
      - "Attempting to run a rake task that doesn't exist"
      - "Typo in rake task name"
      - "Task was removed or renamed in recent updates"
      - "Missing gem or plugin that provides the task"
      - "Task defined in a file that isn't loaded or autoloaded"
      - "Namespace prefix missing from task name"
    solutions:
      - "Check for typos in the task name"
      - "Run `rake -T` to see available tasks and correct names"
      - "Verify the task still exists in current version"
      - "Ensure all required gems are installed"
      - "Check if task requires a namespace prefix (e.g., `gitlab:`)"
      - "Look for deprecated tasks that might have been removed"

  rake_change_in_worker_queues:
    description: "Changes detected in Sidekiq worker queue configurations that require metadata updates."
    patterns:
      - "Changes in worker queues found, please update the metadata by running"
    causes:
      - "Worker queue configuration changed without updating metadata"
      - "Queue routing rules modified without corresponding updates"
      - "New workers added without proper queue assignment"
      - "Queue priority changes not reflected in metadata"
      - "Sidekiq configuration changes not properly documented"
      - "Worker class moved to different namespace but queue not updated"
    solutions:
      - "Run the command suggested in the error message to update metadata"
      - "Ensure queue changes follow proper workflow and documentation"
      - "Update worker queue assignments consistently across files"
      - "Review Sidekiq configuration documentation"
      - "Follow proper procedure for adding or modifying worker queues"
      - "Commit updated metadata files with your changes"

  e2e:code-suggestions-eval:
    description: "End-to-end test failures in code suggestions evaluation, particularly when downstream pipelines can't be found."
    patterns:
      - "Could not find downstream pipeline triggered via"
    causes:
      - "Downstream pipeline configuration issues"
      - "Missing or incorrect pipeline triggering"
      - "API access problems between pipelines"
      - "Timing issues with pipeline creation"
      - "Pipeline trigger tokens invalid or expired"
      - "CI/CD configuration changes affecting pipeline relationships"
    solutions:
      - "Check CI/CD configuration for correct downstream pipeline triggers"
      - "Verify pipeline trigger tokens are valid and have correct permissions"
      - "Review pipeline dependency configuration"
      - "Ensure sufficient CI runner resources are available"
      - "Check for API rate limiting between pipeline stages"
      - "Increase wait times for downstream pipeline creation"
  feature_flag_usage_check_failure:
    description: "Feature flag usage check failures, where feature flags are not properly defined or used."
    patterns:
      - "Feature flag usage check failed"
    causes:
      - "Feature flags used without proper definition"
      - "Missing or incorrect feature flag declaration"
      - "Inconsistent feature flag usage"
      - "Feature flag name typos or mismatches"
      - "Not following feature flag usage guidelines"
    solutions:
      - "Add proper feature flag definition files"
      - "Ensure feature flags are declared correctly"
      - "Fix inconsistencies in feature flag usage"
      - "Check for typos in feature flag names"
      - "Follow feature flag usage guidelines"
      - "Review feature flag deprecation process if removing flags"

  logs_too_big_to_analyze:
    description: "Log output exceeded size limits for complete analysis, truncating job logs and potentially hiding important information."
    patterns:
      - "Job execution will continue but no more output will be collected"
    causes:
      - "Excessive log output from tests or processes"
      - "Debug logging enabled in verbose mode"
      - "Infinite loops or excessive repetition in logs"
      - "Large data dumps to standard output"
      - "Log size exceeding GitLab CI limits"
    solutions:
      - "Reduce log verbosity in tests and processes"
      - "Avoid printing large data structures to output"
      - "Fix any loops or repetitive logging"
      - "Use log files for detailed logs instead of stdout"
      - "Add filtering or sampling for high-volume logs"
      - "Split jobs that produce excessive logs"
