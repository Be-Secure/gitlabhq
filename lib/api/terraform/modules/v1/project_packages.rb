# frozen_string_literal: true

module API
  module Terraform
    module Modules
      module V1
        class ProjectPackages < ::API::Base
          include ::API::Helpers::Authentication
          helpers ::API::Helpers::PackagesHelpers
          helpers ::API::Helpers::Packages::BasicAuthHelpers

          feature_category :package_registry
          urgency :low

          after_validation do
            require_packages_enabled!
          end

          params do
            requires :id, type: String, desc: 'The ID or full path of a project'
            requires :module_name, type: String, desc: "", regexp: API::NO_SLASH_URL_PART_REGEX
            requires :module_system, type: String, regexp: API::NO_SLASH_URL_PART_REGEX
            requires :module_version, type: String, desc: 'Module version', regexp: Gitlab::Regex.semver_regex
          end

          resource :projects, requirements: API::NAMESPACE_OR_PROJECT_REQUIREMENTS do
            namespace ':id/packages/terraform/modules/:module_name/:module_system/*module_version/file' do
              authenticate_with do |accept|
                accept.token_types(:deploy_token).sent_through(:http_deploy_token_header)
                accept.token_types(:job_token).sent_through(:http_job_token_header)
                accept.token_types(:personal_access_token).sent_through(:http_private_token_header)
              end

              desc 'Workhorse authorize Terraform Module package file' do
                detail 'This feature was introduced in GitLab 13.11'
                success code: 200
                failure [
                  { code: 403, message: 'Forbidden' }
                ]
                tags %w[terraform_registry]
              end

              put 'authorize' do
                authorize_workhorse!(
                  subject: authorized_user_project,
                  maximum_size: authorized_user_project.actual_limits.terraform_module_max_file_size
                )
              end

              desc 'Upload Terraform Module package file' do
                detail 'This feature was introduced in GitLab 13.11'
                success code: 201
                failure [
                  { code: 400, message: 'Invalid file' },
                  { code: 401, message: 'Unauthorized' },
                  { code: 403, message: 'Forbidden' },
                  { code: 404, message: 'Not found' }
                ]
                consumes %w[multipart/form-data]
                tags %w[terraform_registry]
              end

              params do
                requires :file, type: ::API::Validations::Types::WorkhorseFile,
                  desc: 'The package file to be published (generated by Multipart middleware)',
                  documentation: { type: 'file' }
              end

              put do
                authorize_upload!(authorized_user_project)

                bad_request!('File is too large') if authorized_user_project.actual_limits.exceeded?(
                  :terraform_module_max_file_size, params[:file].size)

                create_package_file_params = {
                  module_name: params['module_name'],
                  module_system: params['module_system'],
                  module_version: params['module_version'],
                  file: params['file'],
                  build: current_authenticated_job
                }

                result = ::Packages::TerraformModule::CreatePackageService
                  .new(authorized_user_project, current_user, create_package_file_params)
                  .execute

                render_api_error!(result[:message], result[:http_status]) if result[:status] == :error

                track_package_event('push_package', :terraform_module, project: authorized_user_project,
                  namespace: authorized_user_project.namespace)

                created!
              rescue ObjectStorage::RemoteStoreError => e
                Gitlab::ErrorTracking.track_exception(
                  e,
                  extra: { file_name: params[:file_name], project_id: authorized_user_project.id }
                )

                forbidden!
              end
            end
          end
        end
      end
    end
  end
end
