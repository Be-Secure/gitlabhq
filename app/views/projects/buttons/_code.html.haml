- project = project || @project
- dropdown_class = local_assigns.fetch(:dropdown_class, '')
- ref = local_assigns.fetch(:ref)

- if can?(current_user, :download_code, @project)
  .git-clone-holder.js-git-clone-holder
    = render Pajamas::ButtonComponent.new(variant: :confirm, button_options: { id: 'clone-dropdown', class: 'clone-dropdown-btn', data: { toggle: 'dropdown', testid: 'clone-dropdown' } }) do
      %span.js-clone-dropdown-label
        = _('Code')
      = sprite_icon("chevron-down", css_class: "icon")
    %ul.dropdown-menu.dropdown-menu-large.clone-options-dropdown{ role: 'menu', class: dropdown_class, data: { testid: 'clone-dropdown-content' } }
      - if ssh_enabled?
        %li.gl-dropdown-item.js-clone-links{ role: 'menuitem', class: 'gl-px-4!' }
          %label.label-bold
            = _('Clone with SSH')
          .input-group.btn-group
            = text_field_tag :ssh_project_clone, ssh_clone_url_to_repo(project), class: "js-select-on-focus form-control", readonly: true, aria: { label: _('Repository clone URL') }, data: { testid: 'ssh-clone-url-content' }
            .input-group-append
              = clipboard_button(target: '#ssh_project_clone', title: _("Copy URL"), category: :primary, size: :medium)
              = render_if_exists 'projects/buttons/geo'
      - if http_enabled?
        %li.pt-2.gl-dropdown-item.js-clone-links{ role: 'menuitem',  class: 'gl-px-4!' }
          %label.label-bold
            = _('Clone with %{http_label}') % { http_label: gitlab_config.protocol.upcase }
          .input-group.btn-group
            = text_field_tag :http_project_clone, http_clone_url_to_repo(project), class: "js-select-on-focus form-control", readonly: true, aria: { label: _('Repository clone URL') }, data: { testid: 'http-clone-url-content' }
            .input-group-append
              = clipboard_button(target: '#http_project_clone', title: _("Copy URL"), category: :primary, size: :medium)
              = render_if_exists 'projects/buttons/geo'
        = render_if_exists 'projects/buttons/kerberos_clone_field'
      %li.divider.mt-2{ role: 'presentation' }
      %li.pt-2.gl-dropdown-item.js-clone-links{ role: 'menuitem' }
        %label.label-bold{ class: 'gl-px-4!' }
          = _('Open in your IDE')
        - if ssh_enabled?
          - escaped_ssh_url_to_repo = CGI.escape(ssh_clone_url_to_repo(project))
          %a.dropdown-item.open-with-link{ href: 'vscode://vscode.git/clone?url=' + escaped_ssh_url_to_repo }
            .gl-dropdown-item-text-wrapper
              = _('Visual Studio Code (SSH)')
        - if http_enabled?
          - escaped_http_url_to_repo = CGI.escape(http_clone_url_to_repo(project))
          %a.dropdown-item.open-with-link{ href: 'vscode://vscode.git/clone?url=' + escaped_http_url_to_repo }
            .gl-dropdown-item-text-wrapper
              = _('Visual Studio Code (HTTPS)')
        - if ssh_enabled?
          %a.dropdown-item.open-with-link{ href: 'jetbrains://idea/checkout/git?idea.required.plugins.id=Git4Idea&checkout.repo=' + escaped_ssh_url_to_repo }
            .gl-dropdown-item-text-wrapper
              = _('IntelliJ IDEA (SSH)')
        - if http_enabled?
          %a.dropdown-item.open-with-link{ href: 'jetbrains://idea/checkout/git?idea.required.plugins.id=Git4Idea&checkout.repo=' + escaped_http_url_to_repo }
            .gl-dropdown-item-text-wrapper
              = _('IntelliJ IDEA (HTTPS)')
        - if show_xcode_link?(@project)
          %a.dropdown-item.open-with-link{ href: xcode_uri_to_repo(@project) }
            .gl-dropdown-item-text-wrapper
              = _("Xcode")
        - if !project.empty_repo? && can?(current_user, :download_code, project)
          %li.divider.mt-2{ role: 'presentation' }
          = render 'projects/buttons/download_menu_items', project: project, ref: ref
