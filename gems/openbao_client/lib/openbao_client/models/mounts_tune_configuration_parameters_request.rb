=begin
#OpenBao API

#HTTP API that gives you full access to OpenBao. All API routes are prefixed with `/v1/`.

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenbaoClient
  class MountsTuneConfigurationParametersRequest
    attr_accessor :allowed_managed_keys

    # A list of headers to whitelist and allow a plugin to set on responses.
    attr_accessor :allowed_response_headers

    # The list of keys in the request data object that will not be HMAC'ed by audit devices.
    attr_accessor :audit_non_hmac_request_keys

    # The list of keys in the response data object that will not be HMAC'ed by audit devices.
    attr_accessor :audit_non_hmac_response_keys

    # The default lease TTL for this mount.
    attr_accessor :default_lease_ttl

    # User-friendly description for this credential backend.
    attr_accessor :description

    # Determines the visibility of the mount in the UI-specific listing endpoint. Accepted value are 'unauth' and 'hidden', with the empty default ('') behaving like 'hidden'.
    attr_accessor :listing_visibility

    # The max lease TTL for this mount.
    attr_accessor :max_lease_ttl

    # The options to pass into the backend. Should be a json object with string keys and values.
    attr_accessor :options

    # A list of headers to whitelist and pass from the request to the plugin.
    attr_accessor :passthrough_request_headers

    # The semantic version of the plugin to use.
    attr_accessor :plugin_version

    # The type of token to issue (service or batch).
    attr_accessor :token_type

    # The user lockout configuration to pass into the backend. Should be a json object with string keys and values.
    attr_accessor :user_lockout_config

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'allowed_managed_keys' => :'allowed_managed_keys',
        :'allowed_response_headers' => :'allowed_response_headers',
        :'audit_non_hmac_request_keys' => :'audit_non_hmac_request_keys',
        :'audit_non_hmac_response_keys' => :'audit_non_hmac_response_keys',
        :'default_lease_ttl' => :'default_lease_ttl',
        :'description' => :'description',
        :'listing_visibility' => :'listing_visibility',
        :'max_lease_ttl' => :'max_lease_ttl',
        :'options' => :'options',
        :'passthrough_request_headers' => :'passthrough_request_headers',
        :'plugin_version' => :'plugin_version',
        :'token_type' => :'token_type',
        :'user_lockout_config' => :'user_lockout_config'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'allowed_managed_keys' => :'Array<String>',
        :'allowed_response_headers' => :'Array<String>',
        :'audit_non_hmac_request_keys' => :'Array<String>',
        :'audit_non_hmac_response_keys' => :'Array<String>',
        :'default_lease_ttl' => :'String',
        :'description' => :'String',
        :'listing_visibility' => :'String',
        :'max_lease_ttl' => :'String',
        :'options' => :'Object',
        :'passthrough_request_headers' => :'Array<String>',
        :'plugin_version' => :'String',
        :'token_type' => :'String',
        :'user_lockout_config' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenbaoClient::MountsTuneConfigurationParametersRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenbaoClient::MountsTuneConfigurationParametersRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'allowed_managed_keys')
        if (value = attributes[:'allowed_managed_keys']).is_a?(Array)
          self.allowed_managed_keys = value
        end
      end

      if attributes.key?(:'allowed_response_headers')
        if (value = attributes[:'allowed_response_headers']).is_a?(Array)
          self.allowed_response_headers = value
        end
      end

      if attributes.key?(:'audit_non_hmac_request_keys')
        if (value = attributes[:'audit_non_hmac_request_keys']).is_a?(Array)
          self.audit_non_hmac_request_keys = value
        end
      end

      if attributes.key?(:'audit_non_hmac_response_keys')
        if (value = attributes[:'audit_non_hmac_response_keys']).is_a?(Array)
          self.audit_non_hmac_response_keys = value
        end
      end

      if attributes.key?(:'default_lease_ttl')
        self.default_lease_ttl = attributes[:'default_lease_ttl']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'listing_visibility')
        self.listing_visibility = attributes[:'listing_visibility']
      end

      if attributes.key?(:'max_lease_ttl')
        self.max_lease_ttl = attributes[:'max_lease_ttl']
      end

      if attributes.key?(:'options')
        self.options = attributes[:'options']
      end

      if attributes.key?(:'passthrough_request_headers')
        if (value = attributes[:'passthrough_request_headers']).is_a?(Array)
          self.passthrough_request_headers = value
        end
      end

      if attributes.key?(:'plugin_version')
        self.plugin_version = attributes[:'plugin_version']
      end

      if attributes.key?(:'token_type')
        self.token_type = attributes[:'token_type']
      end

      if attributes.key?(:'user_lockout_config')
        self.user_lockout_config = attributes[:'user_lockout_config']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          allowed_managed_keys == o.allowed_managed_keys &&
          allowed_response_headers == o.allowed_response_headers &&
          audit_non_hmac_request_keys == o.audit_non_hmac_request_keys &&
          audit_non_hmac_response_keys == o.audit_non_hmac_response_keys &&
          default_lease_ttl == o.default_lease_ttl &&
          description == o.description &&
          listing_visibility == o.listing_visibility &&
          max_lease_ttl == o.max_lease_ttl &&
          options == o.options &&
          passthrough_request_headers == o.passthrough_request_headers &&
          plugin_version == o.plugin_version &&
          token_type == o.token_type &&
          user_lockout_config == o.user_lockout_config
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [allowed_managed_keys, allowed_response_headers, audit_non_hmac_request_keys, audit_non_hmac_response_keys, default_lease_ttl, description, listing_visibility, max_lease_ttl, options, passthrough_request_headers, plugin_version, token_type, user_lockout_config].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenbaoClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
