=begin
#OpenBao API

#HTTP API that gives you full access to OpenBao. All API routes are prefixed with `/v1/`.

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenbaoClient
  class PkiReadAutoTidyConfigurationResponse
    # Safety buffer after creation after which accounts lacking orders are revoked
    attr_accessor :acme_account_safety_buffer

    # Specifies whether automatic tidy is enabled or not
    attr_accessor :enabled

    # Specifies the duration between automatic tidy operation
    attr_accessor :interval_duration

    # Issuer safety buffer
    attr_accessor :issuer_safety_buffer

    attr_accessor :maintain_stored_certificate_counts

    # Duration to pause between tidying certificates
    attr_accessor :pause_duration

    attr_accessor :publish_stored_certificate_count_metrics

    attr_accessor :revocation_queue_safety_buffer

    # Safety buffer time duration
    attr_accessor :safety_buffer

    # Tidy Unused Acme Accounts, and Orders
    attr_accessor :tidy_acme

    # Specifies whether to tidy up the certificate store
    attr_accessor :tidy_cert_store

    attr_accessor :tidy_cross_cluster_revoked_certs

    # Specifies whether tidy expired issuers
    attr_accessor :tidy_expired_issuers

    attr_accessor :tidy_move_legacy_ca_bundle

    attr_accessor :tidy_revocation_queue

    # Specifies whether to associate revoked certificates with their corresponding issuers
    attr_accessor :tidy_revoked_cert_issuer_associations

    # Specifies whether to remove all invalid and expired certificates from storage
    attr_accessor :tidy_revoked_certs

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'acme_account_safety_buffer' => :'acme_account_safety_buffer',
        :'enabled' => :'enabled',
        :'interval_duration' => :'interval_duration',
        :'issuer_safety_buffer' => :'issuer_safety_buffer',
        :'maintain_stored_certificate_counts' => :'maintain_stored_certificate_counts',
        :'pause_duration' => :'pause_duration',
        :'publish_stored_certificate_count_metrics' => :'publish_stored_certificate_count_metrics',
        :'revocation_queue_safety_buffer' => :'revocation_queue_safety_buffer',
        :'safety_buffer' => :'safety_buffer',
        :'tidy_acme' => :'tidy_acme',
        :'tidy_cert_store' => :'tidy_cert_store',
        :'tidy_cross_cluster_revoked_certs' => :'tidy_cross_cluster_revoked_certs',
        :'tidy_expired_issuers' => :'tidy_expired_issuers',
        :'tidy_move_legacy_ca_bundle' => :'tidy_move_legacy_ca_bundle',
        :'tidy_revocation_queue' => :'tidy_revocation_queue',
        :'tidy_revoked_cert_issuer_associations' => :'tidy_revoked_cert_issuer_associations',
        :'tidy_revoked_certs' => :'tidy_revoked_certs'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'acme_account_safety_buffer' => :'Integer',
        :'enabled' => :'Boolean',
        :'interval_duration' => :'Integer',
        :'issuer_safety_buffer' => :'Integer',
        :'maintain_stored_certificate_counts' => :'Boolean',
        :'pause_duration' => :'String',
        :'publish_stored_certificate_count_metrics' => :'Boolean',
        :'revocation_queue_safety_buffer' => :'Integer',
        :'safety_buffer' => :'Integer',
        :'tidy_acme' => :'Boolean',
        :'tidy_cert_store' => :'Boolean',
        :'tidy_cross_cluster_revoked_certs' => :'Boolean',
        :'tidy_expired_issuers' => :'Boolean',
        :'tidy_move_legacy_ca_bundle' => :'Boolean',
        :'tidy_revocation_queue' => :'Boolean',
        :'tidy_revoked_cert_issuer_associations' => :'Boolean',
        :'tidy_revoked_certs' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenbaoClient::PkiReadAutoTidyConfigurationResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenbaoClient::PkiReadAutoTidyConfigurationResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'acme_account_safety_buffer')
        self.acme_account_safety_buffer = attributes[:'acme_account_safety_buffer']
      end

      if attributes.key?(:'enabled')
        self.enabled = attributes[:'enabled']
      end

      if attributes.key?(:'interval_duration')
        self.interval_duration = attributes[:'interval_duration']
      end

      if attributes.key?(:'issuer_safety_buffer')
        self.issuer_safety_buffer = attributes[:'issuer_safety_buffer']
      end

      if attributes.key?(:'maintain_stored_certificate_counts')
        self.maintain_stored_certificate_counts = attributes[:'maintain_stored_certificate_counts']
      end

      if attributes.key?(:'pause_duration')
        self.pause_duration = attributes[:'pause_duration']
      end

      if attributes.key?(:'publish_stored_certificate_count_metrics')
        self.publish_stored_certificate_count_metrics = attributes[:'publish_stored_certificate_count_metrics']
      end

      if attributes.key?(:'revocation_queue_safety_buffer')
        self.revocation_queue_safety_buffer = attributes[:'revocation_queue_safety_buffer']
      end

      if attributes.key?(:'safety_buffer')
        self.safety_buffer = attributes[:'safety_buffer']
      end

      if attributes.key?(:'tidy_acme')
        self.tidy_acme = attributes[:'tidy_acme']
      end

      if attributes.key?(:'tidy_cert_store')
        self.tidy_cert_store = attributes[:'tidy_cert_store']
      end

      if attributes.key?(:'tidy_cross_cluster_revoked_certs')
        self.tidy_cross_cluster_revoked_certs = attributes[:'tidy_cross_cluster_revoked_certs']
      end

      if attributes.key?(:'tidy_expired_issuers')
        self.tidy_expired_issuers = attributes[:'tidy_expired_issuers']
      end

      if attributes.key?(:'tidy_move_legacy_ca_bundle')
        self.tidy_move_legacy_ca_bundle = attributes[:'tidy_move_legacy_ca_bundle']
      end

      if attributes.key?(:'tidy_revocation_queue')
        self.tidy_revocation_queue = attributes[:'tidy_revocation_queue']
      end

      if attributes.key?(:'tidy_revoked_cert_issuer_associations')
        self.tidy_revoked_cert_issuer_associations = attributes[:'tidy_revoked_cert_issuer_associations']
      end

      if attributes.key?(:'tidy_revoked_certs')
        self.tidy_revoked_certs = attributes[:'tidy_revoked_certs']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          acme_account_safety_buffer == o.acme_account_safety_buffer &&
          enabled == o.enabled &&
          interval_duration == o.interval_duration &&
          issuer_safety_buffer == o.issuer_safety_buffer &&
          maintain_stored_certificate_counts == o.maintain_stored_certificate_counts &&
          pause_duration == o.pause_duration &&
          publish_stored_certificate_count_metrics == o.publish_stored_certificate_count_metrics &&
          revocation_queue_safety_buffer == o.revocation_queue_safety_buffer &&
          safety_buffer == o.safety_buffer &&
          tidy_acme == o.tidy_acme &&
          tidy_cert_store == o.tidy_cert_store &&
          tidy_cross_cluster_revoked_certs == o.tidy_cross_cluster_revoked_certs &&
          tidy_expired_issuers == o.tidy_expired_issuers &&
          tidy_move_legacy_ca_bundle == o.tidy_move_legacy_ca_bundle &&
          tidy_revocation_queue == o.tidy_revocation_queue &&
          tidy_revoked_cert_issuer_associations == o.tidy_revoked_cert_issuer_associations &&
          tidy_revoked_certs == o.tidy_revoked_certs
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [acme_account_safety_buffer, enabled, interval_duration, issuer_safety_buffer, maintain_stored_certificate_counts, pause_duration, publish_stored_certificate_count_metrics, revocation_queue_safety_buffer, safety_buffer, tidy_acme, tidy_cert_store, tidy_cross_cluster_revoked_certs, tidy_expired_issuers, tidy_move_legacy_ca_bundle, tidy_revocation_queue, tidy_revoked_cert_issuer_associations, tidy_revoked_certs].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenbaoClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
